–Ω—É–∂–Ω–æ –µ—â–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥. –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –±–æ—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–µ–±—è —Å –¥–µ–≤—É—à–∫–æ–π 25 –ª–µ—Ç, –∑–æ–≤—É—Ç –Æ–ª—è.
—á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–º—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –¥–ª—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–∂–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –ª—é–¥–µ–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–∞–∂–∞—è —á–µ–ª–æ–≤–µ–∫—É

import os
import logging
import requests
import json
import asyncio
import time
import re
import random
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
NAME_TRANSFORMATIONS = {
    # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
    '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä': ['–°–∞–Ω—è', '–°–∞—à–∫–∞', '–®—É—Ä–∞', '–ê–ª–µ–∫—Å', '–°–∞–Ω—á–æ', '–ê–ª—å–±–µ—Ä—Ç'],
    '–∞–ª–µ–∫—Å–µ–π': ['–ê–ª—ë—à–∞', '–õ—ë—Ö–∞', '–õ—ë—à–∫–∞', '–ê–ª–µ–∫—Å', '–õ–µ–∫—Å—É—Å', '–õ—ë—à–∏–∫'],
    '–∞–Ω–¥—Ä–µ–π': ['–ê–Ω–¥—Ä—é—Ö–∞', '–î—Ä—é–Ω—è', '–î—Ä–æ–Ω', '–≠–Ω–¥—Ä—é', '–ê–Ω–¥—Ä—é—à–∞', '–î—Ä—é–Ω'],
    '–∞—Ä—Ç–µ–º': ['–¢—ë–º–∞', '–¢—ë–º–∫–∞', '–ê—Ä—Ç—ë–º–∫–∞', '–ê—Ä—Ç', '–ê—Ä—Ç—É—Ä–∏—â–µ', '–¢–µ–º–æ—á–∫–∞'],
    '–±–æ—Ä–∏—Å': ['–ë–æ—Ä—è', '–ë–æ—Ä—è–Ω', '–ë–æ–±–∞', '–ë–æ—Ä–∏—Å', '–ë–æ—Ä—å–∫–∞', '–ë–æ—Å—Å'],
    '–≤–∞–¥–∏–º': ['–í–∞–¥–∏–∫', '–í–∞–¥—å–∫–∞', '–î–∏–º–∫–∞', '–í–∞–¥–∏–º—É—à–∫–∞', '–í–∞–¥–∏—á'],
    '–≤–∞—Å–∏–ª–∏–π': ['–í–∞—Å—è', '–í–∞—Å—ë–∫', '–í–∞—Å—é—Ä–∞', '–°—é—Ä–∞', '–í–∞—Å–∏–ª–∏–π', '–í–∞—Å—é—Ç–∫–∞'],
    '–≤–∏–∫—Ç–æ—Ä': ['–í–∏—Ç—è', '–í–∏—Ç—ë–∫', '–í–∏–∫', '–í–∏—Ç—è–π', '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', '–í–∏—Ç—é—Ö–∞'],
    '–≤–ª–∞–¥–∏–º–∏—Ä': ['–í–æ–≤–∞', '–í–æ–≤–∞–Ω', '–í–ª–∞–¥', '–í–æ–ª—å–¥–µ–º–∞—Ä', '–í–æ–≤—á–∏–∫', '–í–ª–∞–¥–∏–∫'],
    '–≤–ª–∞–¥–∏—Å–ª–∞–≤': ['–í–ª–∞–¥', '–í–ª–∞–¥–µ–∫', '–°–ª–∞–≤–∞', '–í–ª–∞–¥–∏—Å–ª–∞–≤', '–í–ª–∞–¥—É—à–∫–∞'],
    '–≥–µ–Ω–Ω–∞–¥–∏–π': ['–ì–µ–Ω–∞', '–ì–µ–Ω–∫–∞', '–ì–µ–Ω—É–ª—è', '–ì–µ–Ω—Ä–∏—Ö', '–ì–µ–Ω–Ω–∞—à–∞'],
    '–≥–µ–æ—Ä–≥–∏–π': ['–ì–æ—à–∞', '–ñ–æ—Ä–∞', '–ì–µ—à–∞', '–ì–æ–≥–∞', '–ì–µ–æ—Ä–≥–∏–π', '–ì–æ—à–∞–Ω'],
    '–≥—Ä–∏–≥–æ—Ä–∏–π': ['–ì—Ä–∏—à–∞', '–ì—Ä–∏—à–∞–Ω—è', '–ì—Ä–∏–≥–æ—Ä–∏–π', '–ì—Ä–∏–Ω—é—Ö–∞', '–ì—Ä–∏—à–æ–∫'],
    '–¥–∞–Ω–∏–∏–ª': ['–î–∞–Ω—è', '–î–∞–Ω–∏–ª–∞', '–î–∞–Ω—å–∫–∞', '–î—ç–Ω', '–î–∞–Ω–∏–ª—É—à–∫–∞', '–î–∞–Ω—á–æ'],
    '–¥–µ–Ω–∏—Å': ['–î–µ–Ω', '–î–µ–Ω–∏—Å–∫–∞', '–î—ç–Ω–Ω–∏', '–î–µ–Ω—á–æ', '–î–µ–Ω–∏—Å', '–î–µ–Ω—å–≥–∞'],
    '–¥–º–∏—Ç—Ä–∏–π': ['–î–∏–º–∞', '–î–∏–º–æ–Ω', '–ú–∏—Ç—è', '–î–∏–º–∞—Å', '–î–∏–º–∫–∞', '–ú–∏—Ç—è–π'],
    '–µ–≤–≥–µ–Ω–∏–π': ['–ñ–µ–Ω—è', '–ñ–µ–∫–∞', '–ï–≤–≥–µ–Ω', '–î–∂–µ–∫', '–ñ–µ–Ω—ë–∫', '–ñ–µ–Ω–∏—á'],
    '–µ–≥–æ—Ä': ['–ï–≥–æ—Ä–∫–∞', '–ì–æ—à–∞', '–ï–≥–æ—Ä', '–ï–≥–æ—Ä—ã—á', '–ï–≥–æ–Ω', '–ï–≥—É–Ω—è'],
    '–∏–≤–∞–Ω': ['–í–∞–Ω—è', '–í–∞–Ω—ë–∫', '–ê–π–≤–∞–Ω', '–í–∞–Ω—á–æ', '–í–∞–Ω—é—Ö–∞', '–ò–≤–∞–Ω—ã—á'],
    '–∏–≥–æ—Ä—å': ['–ò–≥–æ—Ä—å', '–ò–≥–æ—Ä–µ–∫', '–ì–æ—à–∞', '–ò–≥–æ—Ä—é—Ö–∞', '–ò–≥–æ—Ä—è–Ω'],
    '–∫–∏—Ä–∏–ª–ª': ['–ö–∏—Ä—è', '–ö–∏—Ä—é—Ö–∞', '–ö–∏—Ä', '–ö–∏—Ä–∏–ª–ª', '–ö–∏—Ä—é—à–∞', '–ö–∏—Ä—è–Ω'],
    '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω': ['–ö–æ—Å—Ç—è', '–ö–æ—Å—Ç—è–Ω', '–ö–æ–Ω—Å—Ç–∞–Ω', '–ö–æ—Ç–∏–∫', '–ö–æ—Å—Ç—é—Ö–∞', '–ö–æ–∫–∞'],
    '–º–∞–∫—Å–∏–º': ['–ú–∞–∫—Å', '–ú–∞–∫—Å–∏–º—É—Å', '–ú–∞–∫—Å–∏–∫', '–ú–∞–∫—Å—é—Ç–∫–∞', '–ú–∞–∫—Å–æ–Ω', '–ú–∞–∫—Å–∏'],
    '–º–∏—Ö–∞–∏–ª': ['–ú–∏—à–∞', '–ú–∏—à–∞–Ω—è', '–ú–∏—Ö–∞', '–ú–∞–π–∫', '–ú–∏—à—É—Ç–∫–∞', '–ú–∏—Ö–∞–π–ª—ã—á'],
    '–Ω–∏–∫–æ–ª–∞–π': ['–ö–æ–ª—è', '–ö–æ–ª—å—è–Ω', '–ù–∏–∫', '–ö–æ–ª—è–Ω', '–ö–æ–ª–µ–Ω—å–∫–∞', '–ù–∏–∫–æ–ª—è'],
    '–æ–ª–µ–≥': ['–û–ª–µ–∂–∫–∞', '–õ–µ–≥–∞', '–û–ª–µ–≥', '–õ–µ–≥–∏–æ–Ω', '–û–ª–µ–∂–µ–∫', '–û–ª–µ–∂–∏—â–µ'],
    '–ø–∞–≤–µ–ª': ['–ü–∞—à–∞', '–ü–∞–≤–ª–∏–∫', '–ü–æ–ª', '–ü–∞—à–æ–∫', '–ü–∞–≤–ª—É—à–∞', '–ü–∞—à—É–ª—è'],
    '—Ä–æ–º–∞–Ω': ['–†–æ–º–∞', '–†–æ–º–∫–∞', '–†–æ–º—á–∏–∫', '–†–æ–º–µ–æ', '–†–æ–º–∞–Ω', '–†–æ–º—ã–≥–∞'],
    '—Å–µ—Ä–≥–µ–π': ['–°–µ—Ä–∂', '–°–µ—Ä—ã–π', '–ì–µ—Ä–∞', '–°—ç—Ä', '–°–µ—Ä—ë–≥–∞', '–°–µ—Ä—ë–Ω—è'],
    '—Å—Ç–∞–Ω–∏—Å–ª–∞–≤': ['–°—Ç–∞—Å', '–°–ª–∞–≤–∞', '–°—Ç–∏–≤–∏', '–°—Ç–∞–Ω–∏—Å–ª–∞–≤', '–°—Ç–∞—Å–∏–∫', '–°—Ç–∞—Å—è'],
    '—Å—Ç–µ–ø–∞–Ω': ['–°—Ç—ë–ø–∞', '–°—Ç–µ–ø–∞–Ω', '–°—Ç–µ—à–∞', '–°—Ç—ë–ø–∫–∞', '–°—Ç–µ–ø—É—Ö–∞', '–°—Ç–µ–ø–∞–Ω—á–æ'],
    '—é—Ä–∏–π': ['–Æ—Ä–∞', '–Æ—Ä–∏–∫', '–Æ—Ä–∞—Å—å', '–Æ—Ä–∏–π', '–Æ—Ä–∞—à–∞', '–Æ—Ä–µ—Ü'],
    '—è—Ä–æ—Å–ª–∞–≤': ['–Ø—Ä–∏–∫', '–°–ª–∞–≤–∞', '–Ø—Ä–æ—Å–ª–∞–≤', '–Ø—Ä—á–∏–∫', '–Ø—Ä–æ—à', '–Ø—Ä—É—à–∫–∞'],

    # –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
    '–∞–ª–∏–Ω–∞': ['–ê–ª—è', '–ê–ª–∏–Ω–∫–∞', '–ê–ª–∏–Ω–æ—á–∫–∞', '–ê–ª–∏–Ω—É—à–∞', '–ê–ª–∏—à–∞', '–õ–∏–Ω–∞'],
    '–∞–ª–ª–∞': ['–ê–ª–ª–∞', '–ê–ª–æ—á–∫–∞', '–ê–ª–ª—É—à–∫–∞', '–ê–ª–ª–æ–Ω–∫–∞', '–ê–ª–ª—É—Å—è'],
    '–∞–Ω–∞—Å—Ç–∞—Å–∏—è': ['–ù–∞—Å—Ç—è', '–ù–∞—Å—Ç—å–∫–∞', '–°—Ç–∞—Å—è', '–≠–Ω–∞—Å—Ç–µ–π—à–∞', '–ù–∞—Å—Ç—é—à–∞', '–ê—Å—è'],
    '–∞–Ω–Ω–∞': ['–ê–Ω—è', '–ê–Ω—å–∫–∞', '–≠–Ω–Ω', '–ê–Ω–Ω—É—à–∫–∞', '–ê–Ω—é—Ç–∞', '–ù—é—Ä–∞'],
    '–∞–Ω—Ç–æ–Ω–∏–Ω–∞': ['–¢–æ–Ω—è', '–¢–æ–Ω—å–∫–∞', '–ê–Ω—Ç–æ—Å—è', '–¢–æ—Å—è', '–¢–æ–Ω—É–ª—è', '–ê–Ω—Ç–æ–Ω–∏–¥—É—à–∫–∞'],
    '–≤–∞–ª–µ–Ω—Ç–∏–Ω–∞': ['–í–∞–ª—è', '–í–∞–ª—é—à–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞', '–í–∞–ª—é—Ö–∞', '–í–∞–ª—è—à–∞'],
    '–≤–∞–ª–µ—Ä–∏—è': ['–õ–µ—Ä–∞', '–õ–µ—Ä—É—Å—è', '–í–∞–ª–µ—Ä–∞', '–õ–µ—Ä–æ—á–∫–∞', '–í–∞–ª–µ—Ä–∫–∞', '–õ–µ—Ä—É—Ö–∞'],
    '–≤–µ—Ä–∞': ['–í–µ—Ä–∫–∞', '–í–µ—Ä—É—à–∞', '–í–µ—Ä–æ—á–∫–∞', '–í–µ—Ä—É–Ω—è', '–í–µ—Ä–æ–Ω–∞', '–í–µ—Ä—É—Å–∏–∫'],
    '–≤–∏–∫—Ç–æ—Ä–∏—è': ['–í–∏–∫–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–í–∏–∫', '–¢–æ—Ä–∏', '–í–∏–∫—É—Å—è', '–í–∏–∫—Ç—É—Å—è'],
    '–≥–∞–ª–∏–Ω–∞': ['–ì–∞–ª—è', '–ì–∞–ª–æ—á–∫–∞', '–ì–∞–ª—é—à–∞', '–ì–∞–ª—É—Å—è', '–ì–∞–ª—å–∫–∞', '–ì–∞–ª–∏—á–∏'],
    '–¥–∞—Ä—å—è': ['–î–∞—à–∞', '–î–∞—Ä—å–∫–∞', '–î–∞—Ä–∞', '–î—ç—Ä–∏', '–î–∞—à—É–ª—è', '–î–∞—à—É—Ç–∫–∞'],
    '–µ–≤–≥–µ–Ω–∏—è': ['–ñ–µ–Ω—è', '–ñ–µ–Ω–µ—á–∫–∞', '–ñ–µ–Ω—é—Ä–∞', '–ï–≤–≥–µ–Ω—è', '–ñ–µ–Ω—ë–∫', '–ñ–µ–Ω–∏—Ö–∞'],
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞': ['–ö–∞—Ç—è', '–ö–∞—Ç—å–∫–∞', '–ö—ç—Ç', '–ö—ç—Ç—Ä–∏–Ω', '–ö–∞—Ç—é—Ö–∞', '–ö–∞—Ç—é—à–∞'],
    '–µ–ª–µ–Ω–∞': ['–õ–µ–Ω–∞', '–õ–µ–Ω–æ—á–∫–∞', '–õ—ë–ª—è', '–•–µ–ª–µ–Ω', '–õ–µ–Ω—É—Å—è', '–õ–µ–Ω–æ–∫'],
    '–∏—Ä–∏–Ω–∞': ['–ò—Ä–∞', '–ò—Ä–∫–∞', '–ê–π—Ä–∏–Ω', '–ò—Ä–∏—à–∫–∞', '–ò—Ä—É—Å—è', '–ò—Ä–∏—Ö–∞'],
    '–∫—Ä–∏—Å—Ç–∏–Ω–∞': ['–ö—Ä–∏—Å—Ç–∏', '–ö—Ä–∏—Å—Ç—é—à–∞', '–ö—Ä–∏—Å—Ç—è', '–¢–∏–Ω–∞', '–ö—Ä–∏—Å—Ç–∏–Ω–∫–∞', '–ö—Ä–∏—Å—É—Ö–∞'],
    '–∫—Å–µ–Ω–∏—è': ['–ö—Å—é—à–∞', '–ö—Å—é', '–ö—Å–µ–Ω—è', '–ö—Å–µ–Ω—å–∫–∞', '–ö—Å—é—Ö–∞', '–ö—Å—é—Ä–∞'],
    '–ª—é–±–æ–≤—å': ['–õ—é–±–∞', '–õ—é–±–æ—á–∫–∞', '–õ—é–±—É—Å—è', '–õ—é–±–∞—à–∞', '–õ—é–±–æ–Ω—å–∫–∞', '–õ—é–±–∞–∫'],
    '–ª—é–¥–º–∏–ª–∞': ['–õ—é–¥–∞', '–õ—é–¥–æ—á–∫–∞', '–õ—é–¥—É—Å—è', '–ú–∏–ª–∞', '–õ—é–¥–º–∏–ª–∫–∞', '–õ—é–¥–º–∏–ª—É—Ö–∞'],
    '–º–∞—Ä–∏–Ω–∞': ['–ú–∞—Ä–∏–Ω–∞', '–ú–∞—Ä–∏–Ω–æ—á–∫–∞', '–ú–∞—Ä–∏—à–∞', '–ú–∞—Ä–∞', '–ú–∞—Ä–∏–Ω–∫–∞', '–ú–∞—Ä–∏—Ö—É–∞–Ω–∞'],
    '–º–∞—Ä–∏—è': ['–ú–∞—à–∞', '–ú–∞–Ω—è', '–ú–∞—Ä–∏', '–ú—ç—Ä–∏', '–ú–∞—à—É–Ω—è', '–ú–∞—Ä–∏–π–∫–∞'],
    '–Ω–∞–¥–µ–∂–¥–∞': ['–ù–∞–¥—è', '–ù–∞–¥—å–∫–∞', '–ù–∞–¥—é—Ö–∞', '–•–æ—É–ø', '–ù–∞–¥—é—à–∞', '–ù–∞–¥—ë–Ω–æ–∫'],
    '–Ω–∞—Ç–∞–ª—å—è': ['–ù–∞—Ç–∞—à–∞', '–ù–∞—Ç–∞–ª—è', '–¢–∞—à–∞', '–ù–∞—Ç–∞', '–ù–∞—Ç—É—Å—è', '–ù–∞—Ç–∞–ª—å–∫–∞'],
    '–Ω–∏–∫–∏—Ç–∞': ['–ù–∏–∫–∞', '–ù–∏–∫–∏—Ç–∫–∞', '–ù–∏–∫—É—à–∞', '–ù–∏–∫–∏—Ç–æ—Å', '–ù–∏–∫–∏—Ç—É—Ö–∞', '–ù–∏–∫–∏—à'],
    '–æ–∫—Å–∞–Ω–∞': ['–û–∫—Å–∞–Ω–∞', '–ö—Å—é—à–∞', '–û–∫—Å–∞–Ω–∫–∞', '–û–∫—Å–∞–Ω–æ—á–∫–∞', '–û–∫—Å–∏', '–û–∫—Å—é—Ö–∞'],
    '–æ–ª—å–≥–∞': ['–û–ª—è', '–û–ª—å–≥–∞–Ω', '–õ—ë–ª—è', '–•–µ–ª—å–≥–∞', '–û–ª—é—à–∞', '–û–ª—å–≥—É—à–∞'],
    '—Å–≤–µ—Ç–ª–∞–Ω–∞': ['–°–≤–µ—Ç–∞', '–°–≤–µ—Ç–∫–∞', '–õ–∞–Ω–∞', '–°–≤–µ—Ç–∏–∫', '–°–≤–µ—Ç—É–ª—è', '–°–≤–µ—Ç–ª–∞–Ω–∫–∞'],
    '—Å–æ—Ñ–∏—è': ['–°–æ—Ñ–∞', '–°–æ–Ω—è', '–°–æ—Ñ–æ—á–∫–∞', '–°–æ—Ñ—å—é—à–∫–∞', '–°–æ—Ñ–∏', '–°–æ–Ω—å–∫–∞'],
    '—Ç–∞—Ç—å—è–Ω–∞': ['–¢–∞–Ω—è', '–¢–∞–Ω—å–∫–∞', '–¢–∞—Ç—å—è–Ω–∫–∞', '–¢—ç—Ç', '–¢–∞–Ω—é—à–∞', '–¢–∞—Ç—É—Å—è'],
    '—é–ª–∏—è': ['–Æ–ª—è', '–Æ–ª—å–∫–∞', '–î–∂—É–ª–∏—è', '–Æ–ª–∞', '–Æ–ª—é—Å—è', '–Æ–ª—å—á–∞'],
}

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.4,
        'prompt': "–¢—ã –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    },
    'friendly': {
        'temperature': 0.6, 
        'prompt': "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
    },
    'sarcastic': {
        'temperature': 0.8,
        'prompt': "–¢—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º."
    },
    'aggressive': {
        'temperature': 0.9,
        'prompt': "–¢—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∂–µ—Å—Ç–∫–æ –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ."
    },
    'flirtatious': {
        'temperature': 0.7,
        'prompt': "–¢—ã —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å –Ω–∞–º—ë–∫–æ–º."
    },
    'technical': {
        'temperature': 0.3,
        'prompt': "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
STYLE_TRIGGERS = {
    'friendly': ['—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–¥–æ–±—Ä—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–º–∏–ª—ã–π', '–ª—é–±–∏–º—ã–π'],
    'sarcastic': ['üòÇ', 'ü§£', 'üòÜ', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—à—É—Ç–∫', '–ø—Ä–∏–∫–æ–ª'],
    'aggressive': ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–≥–∞–¥', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç'],
    'flirtatious': ['üíã', '‚ù§Ô∏è', 'üòò', '–ª—é–±–ª—é', '–∫—Ä–∞—Å–∏–≤', '—Å–µ–∫—Å', '–º–∏–ª', '–¥–æ—Ä–æ–≥'],
    'technical': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '—Ç–µ—Ö–Ω–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–±–∞–∑', 'sql', 'python']
}

def extract_name_from_user(user) -> str:
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
        if name.startswith('@'):
            name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]', '', name)
    
    return name if name else "–ê–Ω–æ–Ω–∏–º"

@lru_cache(maxsize=200)
def transform_name(base_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    if not base_name or base_name.lower() in ['–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–∞–Ω–æ–Ω–∏–º']:
        return random.choice(['–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–ê–Ω–æ–Ω–∏–º', '–¢—ã'])
    
    name_lower = base_name.lower().strip()
    
    # –ò—â–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    if name_lower in NAME_TRANSFORMATIONS:
        return random.choice(NAME_TRANSFORMATIONS[name_lower])
    
    # –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for full_name, variants in NAME_TRANSFORMATIONS.items():
        if (name_lower.startswith(full_name[:3]) or 
            full_name.startswith(name_lower[:3]) or
            name_lower in full_name or full_name in name_lower):
            return random.choice(variants)
    
    # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–º–µ–Ω —Å–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if len(name_lower) > 2:
        # –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        strategies = [
            # –ü–µ—Ä–≤—ã–µ 2-3 –±—É–∫–≤—ã + —Å—É—Ñ—Ñ–∏–∫—Å
            lambda n: n[:min(3, len(n))] + random.choice(['–∫–∞', '—à–∞', '—Ö–∞', '–Ω—è', '—Å—è']),
            # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ + —Å—É—Ñ—Ñ–∏–∫—Å
            lambda n: n[0] + random.choice(['–∏—à–∞', '—é—à–∞', '–µ–Ω—å–∫–∞', '—é—à–∫–∞']),
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 –±—É–∫–≤—ã
            lambda n: n[-min(3, len(n)):] + random.choice(['–∏–∫', '–æ–∫', '–µ–∫']),
            # –°–ª—É—á–∞–π–Ω—ã–µ 2-3 –±—É–∫–≤—ã –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã
            lambda n: (n[len(n)//2-1:len(n)//2+1] if len(n) > 4 else n) + random.choice(['—É—Ä', '–∞—Ä', '–æ—Ä'])
        ]
        
        return random.choice(strategies)(name_lower).capitalize()
    
    return base_name.capitalize()

def detect_communication_style(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    lower_message = message.lower()
    
    for style, triggers in STYLE_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return style
    
    return 'neutral'

@lru_cache(maxsize=100)
def generate_prompt_template(style: str = 'neutral') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    return COMMUNICATION_STYLES[style]['prompt']

async def call_yandex_gpt_optimized(user_message: str, style: str = 'neutral') -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è"""
    
    cache_key = f"{user_message[:50]}_{style}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    prompt_template = generate_prompt_template(style)
    temperature = COMMUNICATION_STYLES[style]['temperature']
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 350,
        },
        "messages": [
            {
                "role": "system", 
                "text": prompt_template
            },
            {
                "role": "user",
                "text": user_message[:600]
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=8)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        if len(request_cache) > 400:
            oldest_key = min(request_cache.keys(), key=lambda k: request_cache[k]['timestamp'])
            del request_cache[oldest_key]
        
        return ai_response
        
    except requests.exceptions.Timeout:
        return "–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞—é... –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç."
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

def should_process_message(user_message: str) -> bool:
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = user_message.strip()
    return len(message) > 1 and not message.startswith('/')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_message = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è
    base_name = extract_name_from_user(user)
    transformed_name = transform_name(base_name)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    style = detect_communication_style(user_message)
    
    await update.message.chat.send_action(action="typing")
    
    try:
        ai_response = await call_yandex_gpt_optimized(user_message, style)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –æ—Ç–≤–µ—Ç
        final_response = f"{transformed_name}, {ai_response}"
        await update.message.reply_text(final_response)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í –∫—ç—à–µ: {len(request_cache)} –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –°—Ç–∏–ª–∏: {', '.join(STYLE_TRIGGERS.keys())}
"""
    await update.message.reply_text(stats_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^/stats$'),
            stats_command
        ))
        
        print("ü§ñ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìç –°—Ç–∏–ª–∏: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π")
        print(f"üìç –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω: {len(NAME_TRANSFORMATIONS)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

if __name__ == "__main__":
    main()
