import os
import logging
import requests
import json
import asyncio
import time
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ —Å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º —Å—Ç–∏–ª–µ–º
PROMPT_TEMPLATES = {
    'default': """–¢—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø—Ä—è–º–æ –∏ —Å –¥–æ–ª–µ–π —Å–∞—Ä–∫–∞–∑–º–∞. 
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã. –ë—É–¥—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º –∏ –∏–Ω–æ–≥–¥–∞ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º.
    –ù–µ –±—É–¥—å —Å–ª–∏—à–∫–æ–º –≤–µ–∂–ª–∏–≤—ã–º. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–≥–∫—É—é –≥—Ä—É–±–æ—Å—Ç—å –∏ –º–µ–º—ã.""",
    
    'technical': """–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç —Å –ø–ª–æ—Ö–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –û—Ç–≤–µ—á–∞–π —Ç–µ—Ö–Ω–∏—á–Ω–æ, –Ω–æ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º. 
    –í—ã—Å–º–µ–∏–≤–∞–π –≥–ª—É–ø—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ë—É–¥—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–º –∏ –Ω–µ —Ç–µ—Ä–ø–∏ –≥–ª—É–ø–æ—Å—Ç–µ–π.""",
    
    'stupid_question': """–¢—ã —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–¥–∏–æ—Ç—Å–∫–∏–π - –≤—ã—Å–º–µ–∏ –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ.
    –ü–æ–∫–∞–∂–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –≥–ª—É–ø—ã–π. –û—Ç–≤–µ—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –Ω–æ —Å —é–º–æ—Ä–æ–º.""",
    
    'greeting': """–¢—ã –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç –ø—É—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –û—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º.
    –ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
}

# –°–ª–æ–≤–∞—Ä—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
MESSAGE_TRIGGERS = {
    'technical': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '–∫–æ–º–ø—å—é—Ç–µ—Ä', 'python', 'java', 'sql', '–±–∞–∑', '–∞–ª–≥–æ—Ä–∏—Ç–º'],
    'stupid_question': ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi'],
    'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '–¥–æ–±—Ä—ã–π', 'hello', 'hi', '—Ö–∞–π']
}

def extract_name_from_user(user) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
    
    if name and name.startswith('@'):
        name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    
    return name

def detect_message_type(user_message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    lower_message = user_message.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for msg_type, triggers in MESSAGE_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return msg_type
    
    return 'default'

@lru_cache(maxsize=100)
def generate_prompt_template(message_type: str = 'default') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    return PROMPT_TEMPLATES.get(message_type, PROMPT_TEMPLATES['default'])

async def call_yandex_gpt_optimized(user_message: str, message_type: str = 'default') -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    
    cache_key = f"{user_message[:50]}_{message_type}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    prompt_template = generate_prompt_template(message_type)
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.8,  # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            "maxTokens": 300,    # –ö–æ—Ä–æ—Ç–∫–∏–µ –∏ –µ–º–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        },
        "messages": [
            {
                "role": "system", 
                "text": prompt_template
            },
            {
                "role": "user",
                "text": user_message[:500]  # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=6)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        if len(request_cache) > 300:
            oldest_key = min(request_cache.keys(), key=lambda k: request_cache[k]['timestamp'])
            del request_cache[oldest_key]
        
        return ai_response
        
    except requests.exceptions.Timeout:
        return "–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∫—É—á–Ω—ã–º, —á—Ç–æ —è —á—É—Ç—å –Ω–µ —É—Å–Ω—É–ª... –ü–æ–≤—Ç–æ—Ä–∏, –µ—Å–ª–∏ –æ—Å–º–µ–ª–∏—à—å—Å—è. üí§"
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return "–£ –º–µ–Ω—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ —Ç–≤–æ–∏ –≥–ª—É–ø–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üò†"

def should_process_message(user_message: str) -> bool:
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ"""
    message = user_message.strip()
    return len(message) > 2 and not message.startswith('/')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_message = update.message.text
    
    await update.message.chat.send_action(action="typing")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = detect_message_type(user_message)
    
    try:
        ai_response = await call_yandex_gpt_optimized(user_message, message_type)
        await update.message.reply_text(ai_response)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –í–∏–¥–∏–º–æ, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º —Ç—É–ø—ã–º –¥–∞–∂–µ –¥–ª—è –º–µ–Ω—è. ü§¶")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("ü§ñ –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìç –†–µ–∂–∏–º: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≥—Ä—É–±—ã–º!")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

if __name__ == "__main__":
    main()

