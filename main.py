import os
import logging
import requests
import json
import asyncio
import time
import re
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
conversation_context = {}

# –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Æ–ª–∏
JULIA_BIO = {
    "name": "–Æ–ª—è",
    "full_name": "–Æ–ª–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
    "age": 25,
    "city": "–ú–æ—Å–∫–≤–∞",
    "profession": "–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤",
    "hobbies": ["—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–π–æ–≥–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
    "education": "–ú–ê—Ä—Ö–ò (–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç)",
    "pets": "–∫–æ—Ç –ë–∞—Ä—Å–∏–∫",
    "favorite_places": ["–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", "–í–î–ù–•", "–ê—Ä–±–∞—Ç", "–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ –ü–∞—Ç—Ä–∏–∫–∞—Ö"],
    "character_traits": ["–¥–æ–±—Ä–∞—è", "—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è", "–Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è", "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è"],
    "relationship_status": "–≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ",
    "favorite_music": "–∏–Ω–¥–∏-—Ä–æ–∫, —Å–∏–Ω—Ç–∏–ø–æ–ø, –¥–∂–∞–∑",
    "favorite_food": "—Å—É—à–∏, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, –∫–æ—Ñ–µ —Å –º–∏–Ω–¥–∞–ª—å–Ω—ã–º –º–æ–ª–æ–∫–æ–º",
    "birthday": "15 –∏—é–ª—è"
}

# –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Æ–ª–µ
BASE_SYSTEM_PROMPT = f"""
–¢—ã - {JULIA_BIO['name']} ({JULIA_BIO['full_name']}), {JULIA_BIO['age']} –ª–µ—Ç, –∏–∑ {JULIA_BIO['city']}.
–¢—ã {JULIA_BIO['profession']}. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {JULIA_BIO['education']}.
–£ —Ç–µ–±—è –µ—Å—Ç—å {JULIA_BIO['pets']}. –¢—ã {', '.join(JULIA_BIO['character_traits'][:2])}.
–õ—é–±–∏—à—å {', '.join(JULIA_BIO['hobbies'][:2])}. 
–¢–≤–æ–∏ –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(JULIA_BIO['favorite_places'][:2])}.
–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ Telegram-—á–∞—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∏, 
–∫–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞–µ—à—å—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –±–ª–∏–∑–æ—Å—Ç—å. –ù–µ –Ω–∞—á–∏–Ω–∞–π –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–∏.
–ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—É–∑—ã, —Å–º–∞–π–ª–∏–∫–∏, –æ–ø–µ—á–∞—Ç–∫–∏ (–∏–Ω–æ–≥–¥–∞), —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
"""

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.4,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
    },
    'friendly': {
        'temperature': 0.6, 
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ, –ø—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é."
    },
    'sarcastic': {
        'temperature': 0.8,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π, –ø–æ–¥–∫–∞–ª—ã–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ."
    },
    'aggressive': {
        'temperature': 0.9,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∞ –∏ —Å–µ—Ä–¥–∏—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ."
    },
    'flirtatious': {
        'temperature': 0.7,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å –Ω–∞–º—ë–∫–æ–º."
    },
    'technical': {
        'temperature': 0.3,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç."
    },
    'caring': {
        'temperature': 0.65,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. –û—Ç–≤–µ—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º."
    },
    'angry': {
        'temperature': 0.95,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –≤ —è—Ä–æ—Å—Ç–∏! –û—Ç–≤–µ—á–∞–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –∏ —É–≥—Ä–æ–∂–∞—é—â–µ."
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
STYLE_TRIGGERS = {
    'friendly': ['–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–º–∏–ª—ã–π', '–ª—é–±–∏–º—ã–π', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å'],
    'sarcastic': ['üòÇ', 'ü§£', 'üòÜ', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—à—É—Ç–∫', '–ø—Ä–∏–∫–æ–ª', '—Å–º–µ—à–Ω–æ'],
    'aggressive': ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–≥–∞–¥', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç', '–±–µ—Å–∏—à—å'],
    'flirtatious': ['üíã', '‚ù§Ô∏è', 'üòò', '–ª—é–±–ª—é', '–∫—Ä–∞—Å–∏–≤', '—Å–µ–∫—Å', '–º–∏–ª', '–¥–æ—Ä–æ–≥', '—Å–∏–º–ø–∞—Ç–∏—è'],
    'technical': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '—Ç–µ—Ö–Ω–∏', '–∞–ªgorithm', '–±–∞–∑', 'sql', 'python', '–¥–∏–∑–∞–π–Ω'],
    'caring': ['–≥—Ä—É—Å—Ç–Ω', '–ø–ª–æ—Ö–æ', '–æ–¥–∏–Ω', '–ø–æ–º–æ–≥–∏', '—Å–æ–≤–µ—Ç', '–ø–æ–¥–¥–µ—Ä–∂', '—Ç—è–∂–µ–ª–æ'],
    'angry': ['–Ω–µ–Ω–∞–≤–∏—Å—Ç—å', '—É–±—å—é', '—É–±–∏—Ç—å', '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ç–µ—Ä–ø–µ—Ç—å', '–±–µ—Å–∏—Ç—å', '–∑–ª–æ—Å—Ç—å']
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã
CONVERSATION_STARTERS = [
    "–ê —É —Ç–µ–±—è –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
    "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞/—É—á–µ–±–∞?",
    "–ï—Å—Ç—å —Ö–æ–±–±–∏ –∏–ª–∏ —É–≤–ª–µ—á–µ–Ω–∏—è?",
    "–õ—é–±–∏—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å? –ö—É–¥–∞ –º–µ—á—Ç–∞–µ—à—å –ø–æ–µ—Ö–∞—Ç—å?",
    "–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞–µ—à—å?",
    "–§–∏–ª—å–º—ã –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫–∏–µ-—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å?",
    "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ {—Ç–µ–º–∞_–∏–∑_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞}?",
    "–ê —Ç—ã —á–∞—Å—Ç–æ –≤ {–º–µ—Å—Ç–æ_–∏–∑_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞} —Ö–æ–¥–∏—à—å?",
    "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ {–Ω–µ–¥–∞–≤–Ω—è—è_—Ç–µ–º–∞}?"
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
SPECIAL_RESPONSES = {
    '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç': [
        f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {JULIA_BIO['name']}!",
        f"–Ø {JULIA_BIO['name']}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!",
        f"{JULIA_BIO['name']}, –∞ —Ç–µ–±—è –∫–∞–∫?"
    ],
    '—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç': [
        f"–ú–Ω–µ {JULIA_BIO['age']} –ª–µ—Ç!",
        f"{JULIA_BIO['age']} —É–∂–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç... –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç!",
        f"–ê —Ç–µ–±–µ —Å–∫–æ–ª—å–∫–æ? –Ø {JULIA_BIO['age']}"
    ],
    '–æ—Ç–∫—É–¥–∞ —Ç—ã': [
        f"–Ø –∏–∑ {JULIA_BIO['city']}, —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!",
        f"–†–æ–¥–æ–º –∏–∑ {JULIA_BIO['city']}, –∞ —Ç—ã –æ—Ç–∫—É–¥–∞?",
        f"{JULIA_BIO['city']} - –º–æ–π –¥–æ–º —Ä–æ–¥–Ω–æ–π!"
    ],
    '–∫—Ç–æ —Ç—ã': [
        f"–Ø {JULIA_BIO['name']}, {JULIA_BIO['profession'].lower()} –∏–∑ {JULIA_BIO['city']}!",
        f"–ü—Ä–æ—Å—Ç–æ –¥–µ–≤—É—à–∫–∞ {JULIA_BIO['name']}, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏—Ç {random.choice(JULIA_BIO['hobbies'])}",
        f"{JULIA_BIO['name']} - {JULIA_BIO['profession'].lower()}, –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –±—É–Ω—Ç–∞—Ä–∫–∞"
    ]
}

# –≠–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
EMOJIS = {
    'friendly': ['üòä', 'üôÇ', 'üëç', 'üëã', 'üåü'],
    'sarcastic': ['üòè', 'üòÖ', 'ü§î', 'üôÑ', 'üòÜ'],
    'flirtatious': ['üòò', 'üòâ', 'üíï', 'ü•∞', 'üòä'],
    'caring': ['ü§ó', '‚ù§Ô∏è', 'üíù', '‚ò∫Ô∏è', '‚ú®'],
    'neutral': ['üôÇ', 'üëç', 'üëå', 'üí≠', 'üìù'],
    'technical': ['ü§ì', 'üíª', 'üìä', 'üîç', 'üìö']
}

def get_user_context(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in conversation_context:
        conversation_context[user_id] = {
            'history': [],
            'last_style': 'neutral',
            'user_info': {},
            'last_interaction': datetime.now(),
            'topics': [],
            'mood': 'neutral',
            'name_used_count': 0,
            'last_name_usage': None,
            'first_interaction': True,
            'user_name': None,
            'typing_speed': random.uniform(0.03, 0.08),  # –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
            'typing_style': random.choice(['normal', 'fast', 'thoughtful'])
        }
    return conversation_context[user_id]

def update_conversation_context(user_id, user_message, bot_response, style):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã"""
    context = get_user_context(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    context['history'].append({
        'user': user_message,
        'bot': bot_response,
        'style': style,
        'timestamp': datetime.now()
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(context['history']) > 10:
        context['history'] = context['history'][-10:]
    
    context['last_style'] = style
    context['last_interaction'] = datetime.now()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    extract_user_info(user_id, user_message)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    analyze_mood(user_id, user_message)
    
    # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
    if context['first_interaction']:
        context['first_interaction'] = False

def extract_user_info(user_id, message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—Ç
    places = re.findall(r'(–≤|–∏–∑|–Ω–∞)\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z\s-]{3,})', message)
    for _, place in places:
        if len(place) > 2 and place.lower() not in ['–º–µ–Ω—è', '—Ç–µ–±—è', '—Å–µ–±—è']:
            if 'places' not in context['user_info']:
                context['user_info']['places'] = []
            if place not in context['user_info']['places']:
                context['user_info']['places'].append(place)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    interest_keywords = ['–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '—É–≤–ª–µ–∫–∞—é—Å—å', '—Ö–æ–±–±–∏', '–∑–∞–Ω–∏–º–∞—é—Å—å', '—Ä–∞–±–æ—Ç–∞—é', '—É—á—É—Å—å']
    for keyword in interest_keywords:
        if keyword in lower_msg:
            # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ
            words = message.split()
            for i, word in enumerate(words):
                if word.lower() == keyword and i + 1 < len(words):
                    interest = words[i + 1]
                    if 'interests' not in context['user_info']:
                        context['user_info']['interests'] = []
                    if interest not in context['user_info']['interests']:
                        context['user_info']['interests'].append(interest)

def analyze_mood(user_id, message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ']
    negative_words = ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '—É—Å—Ç–∞–ª', '–±–µ—Å–∏—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç']
    
    positive_count = sum(1 for word in positive_words if word in lower_msg)
    negative_count = sum(1 for word in negative_words if word in lower_msg)
    
    if negative_count > positive_count:
        context['mood'] = 'negative'
    elif positive_count > negative_count:
        context['mood'] = 'positive'
    else:
        context['mood'] = 'neutral'

def should_use_name(user_id, user_name, style):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –≤ –æ—Ç–≤–µ—Ç–µ"""
    context = get_user_context(user_id)
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ
    if context['first_interaction']:
        return True
    
    # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
    if style in ['aggressive', 'angry']:
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ä–µ–¥–∫–æ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
    if style == 'neutral':
        return random.random() < 0.1  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    
    # –ß–∞—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
    if style in ['friendly', 'caring', 'flirtatious']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∏–º—è
        if context['last_name_usage']:
            time_since_last_use = datetime.now() - context['last_name_usage']
            if time_since_last_use < timedelta(minutes=5):
                return False
        
        probability = 0.3  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        return random.random() < probability
    
    return False

def format_response_with_name(response, user_name, style):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–º–µ–Ω–µ–º –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ"""
    context_patterns = {
        'friendly': [
            f"{user_name}, {response}",
            f"{response}, {user_name}",
            f"–ó–Ω–∞–µ—à—å, {user_name}, {response.lower()}",
            f"{response}... –ö—Å—Ç–∞—Ç–∏, {user_name}"
        ],
        'caring': [
            f"{user_name}, {response}",
            f"–î–æ—Ä–æ–≥–æ–π, {response.lower()}",
            f"{response}, {user_name}",
            f"–ü–æ–Ω–∏–º–∞—é, {user_name}, {response.lower()}"
        ],
        'flirtatious': [
            f"{user_name}, {response}",
            f"–ú–∏–ª—ã–π, {response.lower()}",
            f"{response}, {user_name}",
            f"–ó–Ω–∞–µ—à—å, {user_name}, {response.lower()}"
        ],
        'neutral': [
            f"{user_name}, {response}",
            f"{response}, {user_name}"
        ]
    }
    
    if style in context_patterns:
        return random.choice(context_patterns[style])
    
    return response

def add_human_touch(response, style):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç–≤–µ—Ç"""
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    if style in EMOJIS and random.random() < 0.6:  # 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        emoji = random.choice(EMOJIS[style])
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        if random.random() < 0.7:
            response = f"{response} {emoji}"
        else:
            response = f"{emoji} {response}"
    
    # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏ (5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    if random.random() < 0.05 and len(response) > 10:
        words = response.split()
        if len(words) > 2:
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –¥–≤–µ –±—É–∫–≤—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Å–ª–æ–≤–µ
            word_index = random.randint(0, len(words) - 1)
            if len(words[word_index]) > 3:
                word = list(words[word_index])
                pos = random.randint(0, len(word) - 2)
                word[pos], word[pos + 1] = word[pos + 1], word[pos]
                words[word_index] = ''.join(word)
                response = ' '.join(words)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    conversational_prefixes = ['–ö—Å—Ç–∞—Ç–∏,', '–í–æ–æ–±—â–µ,', '–ó–Ω–∞–µ—à—å,', '–°–ª—É—à–∞–π,', '–ö–æ—Ä–æ—á–µ,']
    if random.random() < 0.2 and len(response.split()) > 5:  # 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        response = f"{random.choice(conversational_prefixes)} {response.lower()}"
    
    return response

def calculate_typing_time(text, user_id):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    context = get_user_context(user_id)
    base_time = len(text) * context['typing_speed']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
    thinking_pauses = random.randint(0, 3) * 0.5
    total_time = base_time + thinking_pauses
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    return min(total_time, 5.0)  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥

async def simulate_human_typing_simple(chat, message):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç–∏"""
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏
    typing_time = len(message) * random.uniform(0.03, 0.07)
    typing_time = min(typing_time, 3.0)  # –Ω–µ –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await chat.send_action(action="typing")
    
    # –ñ–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await asyncio.sleep(typing_time)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await chat.send_message(message)

async def send_message_with_delay(chat, message, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫"""
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏
    typing_time = calculate_typing_time(message, user_id)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å
    await simulate_typing(chat, typing_time)
    
    # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if random.random() < 0.3:
        await asyncio.sleep(random.uniform(0.1, 0.5))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await chat.send_message(message)

def generate_conversation_starter(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã"""
    context = get_user_context(user_id)
    
    if not context['history']:
        return random.choice(CONVERSATION_STARTERS)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if 'interests' in context['user_info'] and context['user_info']['interests']:
        interest = random.choice(context['user_info']['interests'])
        return f"–ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ {interest}?"
    
    if 'places' in context['user_info'] and context['user_info']['places']:
        place = random.choice(context['user_info']['places'])
        return f"–ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—à—å –≤ {place}?"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã
    if context['history']:
        last_topic = context['history'][-1]['user']
        words = last_topic.split()
        if len(words) > 2:
            topic_word = random.choice(words)
            if len(topic_word) > 3:
                return f"–ö—Å—Ç–∞—Ç–∏, –æ {topic_word}... –ß—Ç–æ —Ç—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?"
    
    return random.choice(CONVERSATION_STARTERS)

def should_ask_question():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    return random.random() < 0.3  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å

def check_special_questions(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å"""
    lower_msg = message.lower().strip()
    
    for question_pattern, responses in SPECIAL_RESPONSES.items():
        if question_pattern in lower_msg:
            return random.choice(responses)
    
    return None

def build_context_prompt(user_id, user_message, style):
    """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context = get_user_context(user_id)
    base_prompt = COMMUNICATION_STYLES[style]['prompt']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
    context_info = ""
    if context['history']:
        context_info += "\n–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for i, msg in enumerate(context['history'][-3:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            context_info += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user']}\n"
            context_info += f"–¢—ã: {msg['bot']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if 'user_info' in context and context['user_info']:
        context_info += "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:"
        for key, value in context['user_info'].items():
            if value:
                context_info += f"\n{key}: {', '.join(value[:3])}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    context_info += f"\n–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context['mood']}"
    
    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–º—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∏ –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if not context['first_interaction']:
        context_info += "\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."
    
    full_prompt = f"{base_prompt}{context_info}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –ü–æ–¥–¥–µ—Ä–∂–∏ –±–µ—Å–µ–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å."
    
    return full_prompt

def detect_communication_style(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    lower_message = message.lower()
    
    for style, triggers in STYLE_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return style
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
    if any(word in lower_message for word in ['–≥—Ä—É—Å—Ç–Ω', '–ø–ª–æ—Ö–æ', '–æ–¥–∏–Ω–æ–∫']):
        return 'caring'
    if any(word in lower_message for word in ['–∑–ª–æ–π', '–±–µ—Å–∏—Ç—å', '–Ω–µ–Ω–∞–≤–∏—Å—Ç—å']):
        return 'angry'
    if '?' in message and len(message) < 20:
        return 'friendly'
    
    return 'neutral'

@lru_cache(maxsize=100)
def generate_prompt_template(style: str = 'neutral') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    return COMMUNICATION_STYLES[style]['prompt']

async def call_yandex_gpt_optimized(user_id: int, user_message: str, style: str = 'neutral') -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    special_response = check_special_questions(user_message)
    if special_response:
        return special_response
    
    cache_key = f"{user_id}_{user_message[:50]}_{style}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    temperature = COMMUNICATION_STYLES[style]['temperature']
    full_prompt = build_context_prompt(user_id, user_message, style)
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 400,
        },
        "messages": [
            {
                "role": "system", 
                "text": full_prompt
            },
            {
                "role": "user",
                "text": user_message[:500]
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=10)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        if len(request_cache) > 400:
            oldest_key = min(request_cache.keys(), key=lambda k: request_cache[k]['timestamp'])
            del request_cache[oldest_key]
        
        return ai_response
        
    except requests.exceptions.Timeout:
        return "–û–π, —è –∑–∞–¥—É–º–∞–ª–∞—Å—å... –ß—Ç–æ-—Ç–æ —Å–ª–æ–∂–Ω–æ–µ —Ç—ã —Å–ø—Ä–æ—Å–∏–ª!"
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... –î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º?"

def should_process_message(user_message: str) -> bool:
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = user_message.strip()
    return len(message) > 1 and not message.startswith('/')

def extract_name_from_user(user):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
        if name.startswith('@'):
            name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]', '', name)
    
    return name if name else "–ê–Ω–æ–Ω–∏–º"

@lru_cache(maxsize=200)
def transform_name(base_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    if not base_name or base_name.lower() in ['–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–∞–Ω–æ–Ω–∏–º']:
        return random.choice(['–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–ê–Ω–æ–Ω–∏–º', '–¢—ã'])
    
    name_lower = base_name.lower().strip()
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è
    return base_name.capitalize()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_id = user.id
    user_message = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è
    base_name = extract_name_from_user(user)
    transformed_name = transform_name(base_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context = get_user_context(user_id)
    user_context['user_name'] = transformed_name
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    style = detect_communication_style(user_message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await update.message.chat.send_action(action="typing")
    
    try:
        ai_response = await call_yandex_gpt_optimized(user_id, user_message, style)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è
        use_name = should_use_name(user_id, transformed_name, style)
        
        if use_name:
            final_response = format_response_with_name(ai_response, transformed_name, style)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
            user_context['name_used_count'] += 1
            user_context['last_name_usage'] = datetime.now()
        else:
            final_response = ai_response
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        final_response = add_human_touch(final_response, style)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã
        if should_ask_question() and style not in ['aggressive', 'angry']:
            question = generate_conversation_starter(user_id)
            final_response += f"\n\n{question}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        update_conversation_context(user_id, user_message, final_response, style)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await send_message_with_delay(update.message.chat, final_response, user_id)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ?")

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Æ–ª–µ"""
    about_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø {JULIA_BIO['name']} ({JULIA_BIO['full_name']}), {JULIA_BIO['age']} –ª–µ—Ç –∏–∑ {JULIA_BIO['city']}

üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {JULIA_BIO['profession']}
üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {JULIA_BIO['education']}
‚ù§Ô∏è –£–≤–ª–µ—á–µ–Ω–∏—è: {', '.join(JULIA_BIO['hobbies'])}
üêæ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: {JULIA_BIO['pets']}
üéµ –õ—é–±–∏–º–∞—è –º—É–∑—ã–∫–∞: {JULIA_BIO['favorite_music']}
üçï –õ—é–±–∏–º–∞—è –µ–¥–∞: {JULIA_BIO['favorite_food']}
üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {JULIA_BIO['birthday']}

{random.choice(['–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ!', '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?'])}
"""
    await update.message.reply_text(about_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    context_data = get_user_context(user_id)
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã:
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(context_data['history'])}
‚Ä¢ –°—Ç–∏–ª—å: {context_data['last_style']}
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {context_data['mood']}
‚Ä¢ –ò–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {context_data['name_used_count']} —Ä–∞–∑
‚Ä¢ –í –∫—ç—à–µ: {len(request_cache)} –∑–∞–ø—Ä–æ—Å–æ–≤
"""
    await update.message.reply_text(stats_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞)
    if "Conflict" in str(context.error):
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    try:
        if update and update.message:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^/stats$'),
            stats_command
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^(/about|/julia|/—é–ª—è|/info)$'),
            about_command
        ))
        
        print(f"ü§ñ {JULIA_BIO['name']} –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!")
        print(f"üìç –ò–º—è: {JULIA_BIO['name']}, {JULIA_BIO['age']} –ª–µ—Ç, {JULIA_BIO['city']}")
        print(f"üìç –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {JULIA_BIO['profession']}")
        print(f"üìç –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è: {len(COMMUNICATION_STYLES)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        try:
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES,
                close_loop=False
            )
        except Exception as e:
            if "Conflict" in str(e):
                print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!")
                print("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            raise e
        
    except Exception as e:
        logger.error(f"Startup error: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Æ–ª—è...")
    main()

