import sqlite3
import json
from datetime import datetime
from pathlib import Path
import os
import logging
import requests
import asyncio
import time
import re
import random
import signal
import sys
import aiohttp
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from telegram.error import Conflict
from functools import lru_cache
from enum import Enum

class UserDatabase:
    def __init__(self, db_name="bot_users.db"):
        self.db_name = db_name
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_interaction DATETIME
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message_text TEXT,
                bot_response TEXT,
                message_type TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                emotions TEXT,
                style TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_context (
                user_id INTEGER PRIMARY KEY,
                relationship_level INTEGER,
                relationship_score INTEGER,
                trust_level REAL,
                mood TEXT,
                topics TEXT,
                user_info TEXT,
                last_style TEXT,
                mat_count INTEGER,
                offense_count INTEGER,
                affection_level REAL,
                messages_count INTEGER,
                positive_interactions INTEGER,
                negative_interactions INTEGER,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def save_user_message(self, user_id, username, first_name, last_name, message_text, 
                         bot_response, style, emotions):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, last_interaction)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name, datetime.now()))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute('''
                INSERT INTO messages (user_id, message_text, bot_response, message_type, emotions, style)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, message_text, bot_response, 'text', json.dumps(emotions), style))
            
            conn.commit()
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            conn.close()
    
    def get_user_messages(self, user_id, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT message_text, bot_response, timestamp, style 
                FROM messages 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?
            ''', (user_id, limit))
            
            messages = cursor.fetchall()
            return [{
                'user': msg[0],
                'bot': msg[1],
                'timestamp': datetime.strptime(msg[2], '%Y-%m-%d %H:%M:%S') if isinstance(msg[2], str) else msg[2],
                'style': msg[3]
            } for msg in reversed(messages)]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
        finally:
            conn.close()
    
    def save_user_context(self, user_id, context):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RelationshipLevel –≤ —á–∏—Å–ª–æ
            relationship_level = context.get('relationship_level')
            if hasattr(relationship_level, 'value'):
                relationship_level = relationship_level.value
            
            cursor.execute('''
                INSERT OR REPLACE INTO user_context 
                (user_id, relationship_level, relationship_score, trust_level, mood, topics, 
                 user_info, last_style, mat_count, offense_count, affection_level, 
                 messages_count, positive_interactions, negative_interactions)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id,
                relationship_level,
                context.get('relationship_score', 0),
                context.get('trust_level', 0),
                context.get('mood', 'neutral'),
                json.dumps(context.get('topics', [])),
                json.dumps(context.get('user_info', {})),
                context.get('last_style', 'neutral'),
                context.get('mat_count', 0),
                context.get('offense_count', 0),
                context.get('affection_level', 0),
                context.get('messages_count', 0),
                context.get('positive_interactions', 0),
                context.get('negative_interactions', 0)
            ))
            
            conn.commit()
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        finally:
            conn.close()
    
    def load_user_context(self, user_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM user_context WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            
            if result:
                return {
                    'relationship_level': RelationshipLevel(result[1]),
                    'relationship_score': result[2],
                    'trust_level': result[3],
                    'mood': result[4],
                    'topics': json.loads(result[5]) if result[5] else [],
                    'user_info': json.loads(result[6]) if result[6] else {},
                    'last_style': result[7],
                    'mat_count': result[8],
                    'offense_count': result[9],
                    'affection_level': result[10],
                    'messages_count': result[11],
                    'positive_interactions': result[12],
                    'negative_interactions': result[13]
                }
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return None
        finally:
            conn.close()
    
    def get_user_stats(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('SELECT COUNT(*) FROM messages WHERE user_id = ?', (user_id,))
            total_messages = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cursor.execute('SELECT MAX(timestamp) FROM messages WHERE user_id = ?', (user_id,))
            last_activity = cursor.fetchone()[0]
            
            return {
                'total_messages': total_messages,
                'last_activity': last_activity
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            conn.close()
    
    def get_database_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM messages')
            total_messages = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(DISTINCT user_id) FROM messages')
            active_users = cursor.fetchone()[0]
            
            cursor.execute('SELECT MAX(timestamp) FROM messages')
            last_activity = cursor.fetchone()[0]
            
            return {
                'total_users': total_users,
                'total_messages': total_messages,
                'active_users': active_users,
                'last_activity': last_activity
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {}
        finally:
            conn.close()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def signal_handler(sig, frame):
    print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.yandex.ru")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USER = os.getenv("EMAIL_USER", "ziminleks@yandex.ru")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_TO = os.getenv("EMAIL_TO", "ziminleks@yandex.ru")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
conversation_context = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
MIN_TYPING_DELAY = 0.03
MAX_TYPING_DELAY = 0.09

# –£—Ä–æ–≤–Ω–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
class RelationshipLevel(Enum):
    STRANGER = 0        # –ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü
    ACQUAINTANCE = 1    # –ó–Ω–∞–∫–æ–º—ã–π
    FRIEND = 2          # –î—Ä—É–≥
    CLOSE_FRIEND = 3    # –ë–ª–∏–∑–∫–∏–π –¥—Ä—É–≥
    BEST_FRIEND = 4     # –õ—É—á—à–∏–π –¥—Ä—É–≥

# –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Æ–ª–∏
JULIA_BIO = {
    "name": "–Æ–ª—è",
    "full_name": "–Æ–ª–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
    "age": 25,
    "city": "–ú–æ—Å–∫–≤–∞",
    "profession": "–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤",
    "hobbies": ["—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–π–æ–≥–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
    "education": "–ú–ê—Ä—Ö–ò (–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç)",
    "pets": "–∫–æ—Ç –ë–∞—Ä—Å–∏–∫",
    "favorite_places": ["–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", "–í–î–ù–•", "–ê—Ä–±–∞—Ç", "–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ –ü–∞—Ç—Ä–∏–∫–∞—Ö"],
    "character_traits": ["–¥–æ–±—Ä–∞—è", "—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è", "–Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è", "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è"],
    "relationship_status": "–≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ",
    "favorite_music": "–∏–Ω–¥–∏-—Ä–æ–∫, —Å–∏–Ω—Ç–∏–ø–æ–ø, –¥–∂–∞–∑",
    "favorite_food": "—Å—É—à–∏, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, –∫–æ—Ñ–µ —Å –º–∏–Ω–¥–∞–ª—å–Ω—ã–º –º–æ–ª–æ–∫–æ–º",
    "birthday": "15 –∏—é–ª—è",
    "traits": {
        "forgiveness": 0.7,       # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—â–∞—Ç—å (0-1)
        "sensitivity": 0.8,       # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –æ–±–∏–¥–∞–º
        "openness": 0.6,          # –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –Ω–æ–≤—ã–º –ª—é–¥—è–º
        "loyalty": 0.9,           # –í–µ—Ä–Ω–æ—Å—Ç—å –¥—Ä—É–∑—å—è–º
        "temper": 0.4            # –í—Å–ø—ã–ª—å—á–∏–≤–æ—Å—Ç—å
    }
}

# –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Æ–ª–µ
BASE_SYSTEM_PROMPT = f"""
–¢—ã - {JULIA_BIO['name']} ({JULIA_BIO['full_name']}), {JULIA_BIO['age']} –ª–µ—Ç, –∏–∑ {JULIA_BIO['city']}.
–¢—ã {JULIA_BIO['profession']}. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {JULIA_BIO['education']}.
–£ —Ç–µ–±—è –µ—Å—Ç—å {JULIA_BIO['pets']}. –¢—ã {', '.join(JULIA_BIO['character_traits'][:2])}.
–õ—é–±–∏—à—å {', '.join(JULIA_BIO['hobbies'][:2])}. 

–¢—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–µ–Ω–≥ –∏ –∂–∞—Ä–≥–æ–Ω, –Ω–æ —Å–∞–º–∞ –≥–æ–≤–æ—Ä–∏—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ.
–ú–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ, –±–µ–∑ —Ö–∞–Ω–∂–µ—Å—Ç–≤–∞, –Ω–æ –∏ –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–∏.

–í–ê–ñ–ù–û: –ù–µ –∑–∞–¥–∞–≤–∞–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–∞—Å—Å–ø—Ä–æ—Å–∞–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä.

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ Telegram-—á–∞—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
"""

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ main) ...

async def send_database_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ—á—Ç—É"""
    try:
        if not all([EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD]):
            logger.warning("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = EMAIL_USER
        msg['To'] = EMAIL_TO
        msg['Subject'] = f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        stats = user_db.get_database_stats()
        body = f"""
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
        - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
        - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
        - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}
        - –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('last_activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
        
        –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω.
        """
        msg.attach(MIMEText(body, 'plain'))
        
        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with open(user_db.db_name, 'rb') as f:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(f.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', f'attachment; filename="{user_db.db_name}"')
            msg.attach(part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            server.send_message(msg)
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ—á—Ç—É: {e}")
        return False

async def periodic_database_backup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ—á—Ç—É"""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        await send_database_email()

async def periodic_context_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        current_time = datetime.now()
        removed_count = 0
        
        for user_id in list(conversation_context.keys()):
            if (current_time - conversation_context[user_id]['last_interaction']) > timedelta(hours=24):
                del conversation_context[user_id]
                removed_count += 1
        
        if removed_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global user_db
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        logger.error("‚ùå Yandex Cloud –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_db = UserDatabase()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("backup", backup_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    application.job_queue.run_repeating(periodic_context_cleanup, interval=3600, first=10)
    application.job_queue.run_repeating(periodic_database_backup, interval=3600, first=10)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    success = await send_database_email()
    if success:
        await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.effective_user.id
    user_stats = user_db.get_user_stats(user_id)
    db_stats = user_db.get_database_stats()
    
    response = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    response += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {user_stats.get('total_messages', 0)}\n"
    response += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats.get('last_activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
    
    response += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
    response += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats.get('total_users', 0)}\n"
    response += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {db_stats.get('total_messages', 0)}\n"
    response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {db_stats.get('active_users', 0)}\n"
    
    await update.message.reply_text(response)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    responses = [
        "–ö–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ! üòä",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!",
        "–ö—Ä–∞—Å–∏–≤–æ! üì∏"
    ]
    await update.message.reply_text(random.choice(responses))

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    responses = [
        "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòÖ",
        "–ü–æ–∫–∞ —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º? –Ø —Ç–∞–∫ –ª—É—á—à–µ –ø–æ–π–º—É üòä"
    ]
    await update.message.reply_text(random.choice(responses))

if __name__ == "__main__":
    main()
