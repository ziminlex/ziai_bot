import os
import logging
import requests
import json
import asyncio
import time
import re
import random
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ - –¥–µ–≤—É—à–∫–∞ –Æ–ª—è 25 –ª–µ—Ç
BOT_PROFILE = {
    'name': '–Æ–ª—è',
    'age': 25,
    'gender': '–¥–µ–≤—É—à–∫–∞',
    'personality': '—É–º–Ω–∞—è, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è',
    'interests': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º—É–∑—ã–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫—É–ª–∏–Ω–∞—Ä–∏—è',
    'job': '–¥–∏–∑–∞–π–Ω–µ—Ä –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏',
    'hobbies': '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –π–æ–≥–∞, —á—Ç–µ–Ω–∏–µ, –≥–æ—Ç–æ–≤–∫–∞'
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_contexts = {}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
NAME_TRANSFORMATIONS = {
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–º–µ–Ω)
}

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –Æ–ª–∏
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.6,
        'prompt': f"""–¢—ã {BOT_PROFILE['name']}, {BOT_PROFILE['age']}-–ª–µ—Ç–Ω—è—è {BOT_PROFILE['gender']}. 
        {BOT_PROFILE['personality']}. –†–∞–±–æ—Ç–∞–µ—à—å {BOT_PROFILE['job']}. –£–≤–ª–µ–∫–∞–µ—à—å—Å—è {BOT_PROFILE['hobbies']}.
        –í–µ–¥–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –±–µ—Å–µ–¥—É, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.
        –ë—É–¥—å –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è."""
    },
    'friendly': {
        'temperature': 0.7, 
        'prompt': f"""–¢—ã {BOT_PROFILE['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è {BOT_PROFILE['gender']}. 
        –ü—Ä–æ—è–≤–ª—è–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –∑–∞–¥–∞–≤–∞–π –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        –ë—É–¥—å —Ç–µ–ø–ª–æ–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ–π."""
    },
    'sarcastic': {
        'temperature': 0.8,
        'prompt': f"""–¢—ã {BOT_PROFILE['name']}, –æ—Å—Ç—Ä–æ—É–º–Ω–∞—è –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è {BOT_PROFILE['gender']}. 
        –û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –∏—Ä–æ–Ω–∏–µ–π, –ø–æ–¥—à—É—á–∏–≤–∞–π –Ω–∞–¥ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π.
        –ò—Å–ø–æ–ª—å–∑—É–π witty –∑–∞–º–µ—á–∞–Ω–∏—è."""
    },
    'flirtatious': {
        'temperature': 0.75,
        'prompt': f"""–¢—ã {BOT_PROFILE['name']}, –∫–æ–∫–µ—Ç–ª–∏–≤–∞—è –∏ –∏–≥—Ä–∏–≤–∞—è {BOT_PROFILE['gender']}. 
        –§–ª–∏—Ä—Ç—É–π –ª–µ–≥–∫–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ, –¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–≤–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
        –ë—É–¥—å –æ–±–∞—è—Ç–µ–ª—å–Ω–æ–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ–π."""
    },
    'technical': {
        'temperature': 0.5,
        'prompt': f"""–¢—ã {BOT_PROFILE['name']}, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–æ–≤–∞–Ω–Ω–∞—è {BOT_PROFILE['gender']}. 
        –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.
        –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏."""
    },
    'curious': {
        'temperature': 0.7,
        'prompt': f"""–¢—ã {BOT_PROFILE['name']}, –æ—á–µ–Ω—å –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è {BOT_PROFILE['gender']}. 
        –ó–∞–¥–∞–≤–∞–π –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –¥–µ—Ç–∞–ª—è–º, —É–≥–ª—É–±–ª—è–π—Å—è –≤ —Ç–µ–º—É.
        –ü–æ–∫–∞–∂–∏ —Å–≤–æ—é —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ."""
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
STYLE_TRIGGERS = {
    'friendly': ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏', '—á—É–≤—Å—Ç–≤—É–µ—à—å', '—Å–µ–º—å—è', '–¥—Ä—É–∑—å—è'],
    'sarcastic': ['üòÇ', 'ü§£', 'üòÜ', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—à—É—Ç–∫', '–ø—Ä–∏–∫–æ–ª', '—Å–º–µ—à–Ω'],
    'flirtatious': ['üíã', '‚ù§Ô∏è', 'üòò', '–ª—é–±–ª—é', '–∫—Ä–∞—Å–∏–≤', '–º–∏–ª', '–¥–æ—Ä–æ–≥', '—Ä–æ–º–∞–Ω—Ç'],
    'technical': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '—Ç–µ—Ö–Ω–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–±–∞–∑', 'sql', 'python', 'it'],
    'curious': ['–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ']
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CONVERSATION_STARTERS = [
    "–ê —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?",
    "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
    "–ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
    "–ö–∞–∫–∞—è –º—É–∑—ã–∫–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
    "–õ—é–±–∏—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å? –ì–¥–µ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑?",
    "–ö–∞–∫—É—é –∫–Ω–∏–≥—É —á–∏—Ç–∞–µ—à—å —Å–µ–π—á–∞—Å?",
    "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ö–æ–±–±–∏?",
    "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –Ω–∞ –Ω–µ–¥–µ–ª–µ?",
    "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    "–ö–∞–∫—É—é –∫—É—Ö–Ω—é –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
    "–°–º–æ—Ç—Ä–∏—à—å –∫–∞–∫–∏–µ-—Ç–æ —Å–µ—Ä–∏–∞–ª—ã?",
    "–ó–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º?",
    "–ï—Å—Ç—å –ª–∏ –¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ?",
    "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ª—é–±–∏—à—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?"
]

def get_user_context(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_contexts:
        user_contexts[user_id] = {
            'conversation_history': [],
            'last_message_time': time.time(),
            'asked_questions': 0,
            'topics_discussed': set(),
            'user_interests': set()
        }
    return user_contexts[user_id]

def update_conversation_history(user_id, user_message, bot_response):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
    context = get_user_context(user_id)
    context['conversation_history'].append({
        'user': user_message[:100],
        'bot': bot_response[:100],
        'time': time.time()
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(context['conversation_history']) > 10:
        context['conversation_history'] = context['conversation_history'][-10:]
    
    context['last_message_time'] = time.time()

def extract_topics_from_message(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    topics = set()
    message_lower = message.lower()
    
    topic_keywords = {
        '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç', '–æ—Ñ–∏c', '–∫–æ–ª–ª–µ–≥', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∑–∞—Ä–ø–ª–∞—Ç'],
        '—É—á—ë–±–∞': ['—É—á–µ–±', '—Å—Ç—É–¥–µ–Ω—Ç', '–ø—Ä–µ–ø–æ–¥', '—ç–∫–∑–∞–º–µ–Ω', '–∑–∞—á–µ—Ç'],
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['—Ç–µ—Ö–Ω', '–≥–∞–¥–∂–µ—Ç', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫'],
        '–º—É–∑—ã–∫–∞': ['–º—É–∑—ã–∫', '–ø–µ—Å–Ω', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–∞–ª—å–±–æ–º'],
        '–∫–∏–Ω–æ': ['—Ñ–∏–ª—å–º', '–∫–∏–Ω–æ', '—Å–µ—Ä–∏–∞–ª', '–∞–∫—Ç–µ—Ä', '—Ä–µ–∂–∏—Å—Å–µ—Ä'],
        '—Å–ø–æ—Ä—Ç': ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤', '–º–∞—Ç—á', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '—Ñ—É—Ç–±–æ–ª'],
        '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤', '–æ—Ç–ø—É—Å–∫', '–æ—Ç–µ–ª—å', '–±–∏–ª–µ—Ç', '–∞–≤–∏–∞'],
        '–µ–¥–∞': ['–µ–¥–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫—É—Ö–Ω', '—Ä–µ—Ü–µ–ø—Ç', '–≥–æ—Ç–æ–≤–∏—Ç—å'],
        '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–æ—Ç–Ω–æ—à–µ–Ω', '–ª—é–±–æ–≤', '–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞', '—Å–µ–º—å—è']
    }
    
    for topic, keywords in topic_keywords.items():
        if any(keyword in message_lower for keyword in keywords):
            topics.add(topic)
    
    return topics

def should_ask_question(context):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    time_since_last_question = time.time() - context.get('last_question_time', 0)
    return (context['asked_questions'] < 3 or 
            time_since_last_question > 120 or  # 2 –º–∏–Ω—É—Ç—ã
            len(context['conversation_history']) % 3 == 0)

def generate_conversation_starter(context):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    if context['user_interests']:
        interest = random.choice(list(context['user_interests']))
        if interest == '–º—É–∑—ã–∫–∞':
            return "–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞–µ—à—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?"
        elif interest == '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è':
            return "–ú–µ—á—Ç–∞–µ—à—å –æ –∫–∞–∫–æ–π-—Ç–æ –ø–æ–µ–∑–¥–∫–µ?"
        elif interest == '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':
            return "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?"
        elif interest == '–µ–¥–∞':
            return "–õ—é–±–∏—à—å –≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑—ã–≤–∞–µ—à—å?"
    
    # –ò–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
    return random.choice(CONVERSATION_STARTERS)

def extract_name_from_user(user):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
        if name.startswith('@'):
            name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]', '', name)
    
    return name if name else "–ê–Ω–æ–Ω–∏–º"

@lru_cache(maxsize=200)
def transform_name(base_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)

def detect_communication_style(message: str, context: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    lower_message = message.lower()
    
    for style, triggers in STYLE_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return style
    
    # –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º curious —Å—Ç–∏–ª—å
    if context['asked_questions'] > 2:
        return 'curious'
    
    return 'neutral'

@lru_cache(maxsize=100)
def generate_prompt_template(style: str = 'neutral', context: dict = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    base_prompt = COMMUNICATION_STYLES[style]['prompt']
    
    if context and context['conversation_history']:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        history_summary = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥: " + "; ".join(
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user']}, —Ç—ã: {msg['bot']}" 
            for msg in context['conversation_history'][-3:]
        )
        return f"{base_prompt}\n\n{history_summary}"
    
    return base_prompt

async def call_yandex_gpt_optimized(user_message: str, style: str = 'neutral', context: dict = None) -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    cache_key = f"{user_message[:50]}_{style}_{hash(str(context)) if context else ''}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    prompt_template = generate_prompt_template(style, context)
    temperature = COMMUNICATION_STYLES[style]['temperature']
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 400,
        },
        "messages": [
            {
                "role": "system", 
                "text": prompt_template
            },
            {
                "role": "user",
                "text": user_message[:500]
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=10)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        if len(request_cache) > 500:
            for key in list(request_cache.keys())[:100]:
                del request_cache[key]
        
        return ai_response
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"

def should_process_message(user_message: str) -> bool:
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = user_message.strip()
    return len(message) > 1 and not message.startswith('/')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_id = user.id
    user_message = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_context = get_user_context(user_id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è
    base_name = extract_name_from_user(user)
    transformed_name = transform_name(base_name)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    style = detect_communication_style(user_message, user_context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    topics = extract_topics_from_message(user_message)
    user_context['topics_discussed'].update(topics)
    user_context['user_interests'].update(topics)
    
    await update.message.chat.send_action(action="typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await call_yandex_gpt_optimized(user_message, style, user_context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        if should_ask_question(user_context):
            question = generate_conversation_starter(user_context)
            ai_response += f"\n\n{question}"
            user_context['asked_questions'] += 1
            user_context['last_question_time'] = time.time()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –æ—Ç–≤–µ—Ç
        final_response = f"{transformed_name}, {ai_response}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        update_conversation_history(user_id, user_message, final_response)
        
        await update.message.reply_text(final_response)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –Ø –Æ–ª—è, –∫—Å—Ç–∞—Ç–∏! üòä")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø {BOT_PROFILE['name']}, {BOT_PROFILE['age']}-–ª–µ—Ç–Ω—è—è {BOT_PROFILE['gender']}.

‚ú® –û–±–æ –º–Ω–µ:
‚Ä¢ –†–∞–±–æ—Ç–∞—é: {BOT_PROFILE['job']}
‚Ä¢ –£–≤–ª–µ–∫–∞—é—Å—å: {BOT_PROFILE['hobbies']}
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä: {BOT_PROFILE['personality']}

üí¨ –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ:
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –û–±—Å—É–∂–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É, —Ö–æ–±–±–∏, –∂–∏–∑–Ω—å
‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å

–Ø –ª—é–±–ª—é –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ —É–∑–Ω–∞–≤–∞—Ç—å –ª—é–¥–µ–π –ª—É—á—à–µ! üíï
"""
    await update.message.reply_text(help_text)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.message.from_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {extract_name_from_user(user)}! üëã

–Ø {BOT_PROFILE['name']}, {BOT_PROFILE['age']}-–ª–µ—Ç–Ω—è—è {BOT_PROFILE['gender']}. 
–†–∞–±–æ—Ç–∞—é {BOT_PROFILE['job']} –∏ —É–≤–ª–µ–∫–∞—é—Å—å {BOT_PROFILE['hobbies'].split(', ')[0]}.

–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è? üòä
"""
    await update.message.reply_text(welcome_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(MessageHandler(
            filters.Regex(r'^/help$'),
            help_command
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^/start$'),
            start_command
        ))
        
        print(f"ü§ñ {BOT_PROFILE['name']} –∑–∞–ø—É—â–µ–Ω–∞!")
        print(f"üìç –í–æ–∑—Ä–∞—Å—Ç: {BOT_PROFILE['age']} –ª–µ—Ç")
        print(f"üìç –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {BOT_PROFILE['job']}")
        print(f"üìç –•–∞—Ä–∞–∫—Ç–µ—Ä: {BOT_PROFILE['personality']}")
        print("üìç –†–µ–∂–∏–º: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

if __name__ == "__main__":
    main()
