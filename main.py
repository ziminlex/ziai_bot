import os
import logging
import requests
import json
import asyncio
import time
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –°–ª–æ–≤–∞—Ä—å —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–º–µ–Ω
AFFECTIONATE_NAMES = {
    '–∞–ª–µ–∫—Å–µ–π': '–ê–ª—ë—à–∞', '–∞–ª—ë—à–∞': '–ê–ª—ë—à–∞', '–ª–µ—à–∞': '–õ—ë—à–∞',
    '–∞–Ω–¥—Ä–µ–π': '–ê–Ω–¥—Ä—é—à–∞', '–∞–Ω–¥—Ä—é—à–∞': '–ê–Ω–¥—Ä—é—à–∞',
    '—Å–µ—Ä–≥–µ–π': '–°–µ—Ä–µ–∂–∞', '—Å–µ—Ä—ë–∂–∞': '–°–µ—Ä—ë–∂–∞',
    '–¥–º–∏—Ç—Ä–∏–π': '–î–∏–º–∞', '–¥–∏–º–∞': '–î–∏–º–∞',
    '–º–∏—Ö–∞–∏–ª': '–ú–∏—à–∞', '–º–∏—à–∞': '–ú–∏—à–∞',
    '–≤–ª–∞–¥–∏–º–∏—Ä': '–í–æ–≤–∞', '–≤–æ–≤–∞': '–í–æ–≤–∞',
    '–Ω–∏–∫–æ–ª–∞–π': '–ö–æ–ª—è', '–∫–æ–ª—è': '–ö–æ–ª—è',
    '–∏–≤–∞–Ω': '–í–∞–Ω—è', '–≤–∞–Ω—è': '–í–∞–Ω—è',
    '–µ–≤–≥–µ–Ω–∏–π': '–ñ–µ–Ω—è', '–∂–µ–Ω—è': '–ñ–µ–Ω—è',
    '–ø–∞–≤–µ–ª': '–ü–∞—à–∞', '–ø–∞—à–∞': '–ü–∞—à–∞',
    '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω': '–ö–æ—Å—Ç—è', '–∫–æ—Å—Ç—è': '–ö–æ—Å—Ç—è',
    '–≤–∏–∫—Ç–æ—Ä': '–í–∏—Ç—è', '–≤–∏—Ç—è': '–í–∏—Ç—è',
    '–∞–Ω–∞—Å—Ç–∞—Å–∏—è': '–ù–∞—Å—Ç—è', '–Ω–∞—Å—Ç—è': '–ù–∞—Å—Ç—è',
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞': '–ö–∞—Ç—è', '–∫–∞—Ç—è': '–ö–∞—Ç—è',
    '–º–∞—Ä–∏—è': '–ú–∞—à–∞', '–º–∞—à–∞': '–ú–∞—à–∞',
    '–æ–ª—å–≥–∞': '–û–ª—è', '–æ–ª—è': '–û–ª—è',
    '—Ç–∞—Ç—å—è–Ω–∞': '–¢–∞–Ω—è', '—Ç–∞–Ω—è': '–¢–∞–Ω—è',
    '—é–ª–∏—è': '–Æ–ª—è', '—é–ª—è': '–Æ–ª—è',
    '–∞–Ω–Ω–∞': '–ê–Ω—è', '–∞–Ω—è': '–ê–Ω—è',
    '–µ–ª–∏–∑–∞–≤–µ—Ç–∞': '–õ–∏–∑–∞', '–ª–∏–∑–∞': '–õ–∏–∑–∞',
    '–¥–∞—Ä—å—è': '–î–∞—à–∞', '–¥–∞—à–∞': '–î–∞—à–∞'
}

# –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
PROMPT_TEMPLATES = {
    'default': "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–º–µ–Ω.",
    'technical': "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –ë—É–¥—å —Ç–æ—á–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω.",
    'friendly': "–¢—ã –ª—É—á—à–∏–π –¥—Ä—É–≥. –û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –∑–∞–±–æ—Ç–æ–π."
}

@lru_cache(maxsize=200)
def get_affectionate_name(name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è"""
    if not name:
        return "–¥—Ä—É–≥"
    
    name_lower = name.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    if name_lower in AFFECTIONATE_NAMES:
        return AFFECTIONATE_NAMES[name_lower]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for full_name, affectionate in AFFECTIONATE_NAMES.items():
        if name_lower in full_name or full_name in name_lower:
            return affectionate
    
    # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–º–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
    if len(name) > 3:
        if name_lower.endswith(('–∏–π', '–µ–π', '–∞–π')):
            return name[:-2] + '–µ–Ω—å–∫–∞'
        elif name_lower.endswith('–Ω'):
            return name + '—é—à–∞'
        else:
            return name + '—à–∞'
    
    return name

def extract_name_from_user(user) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
    name = user.first_name or ""
    
    # –ï—Å–ª–∏ first_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º last_name –∏–ª–∏ username
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
    
    # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if name and name.startswith('@'):
        name = name[1:]
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏)
    name = name.split()[0] if name else "–¥—Ä—É–≥"
    
    return name

@lru_cache(maxsize=100)
def generate_prompt_template(base_name: str, message_type: str = 'default') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    affectionate_name = get_affectionate_name(base_name)
    base_template = PROMPT_TEMPLATES.get(message_type, PROMPT_TEMPLATES['default'])
    
    return f"{base_template} –¢–µ–±–µ –ø–∏—à–µ—Ç {affectionate_name}. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É/–Ω–µ–π –ø–æ –∏–º–µ–Ω–∏ –≤ —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ."

async def call_yandex_gpt_optimized(user_message: str, user_name: str, message_type: str = 'default') -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    cache_key = f"{user_message[:50]}_{message_type}_{user_name}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    affectionate_name = get_affectionate_name(user_name)
    prompt_template = generate_prompt_template(user_name, message_type)
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 400,
        },
        "messages": [
            {
                "role": "system", 
                "text": prompt_template
            },
            {
                "role": "user",
                "text": user_message[:800]
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=8)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        if len(request_cache) > 500:
            for key in list(request_cache.keys())[:100]:
                del request_cache[key]
        
        return ai_response
        
    except requests.exceptions.Timeout:
        return f"{affectionate_name}, —è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–∑–∞–¥—É–º–∞–ª—Å—è... –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞? üê¢"
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return f"{affectionate_name}, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫? üí´"

def should_process_message(user_message: str) -> bool:
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = user_message.strip().lower()
    return len(message) > 1 and not message.startswith('/')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_name = extract_name_from_user(user)
    user_message = update.message.text
    
    await update.message.chat.send_action(action="typing")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = 'default'
    lower_message = user_message.lower()
    
    if any(word in lower_message for word in ['—Ç–µ—Ö–Ω–∏', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '–∫–æ–º–ø—å—é—Ç–µ—Ä']):
        message_type = 'technical'
    elif any(word in lower_message for word in ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω', '—á—É–≤—Å—Ç–≤']):
        message_type = 'friendly'
    
    try:
        ai_response = await call_yandex_gpt_optimized(user_message, user_name, message_type)
        await update.message.reply_text(ai_response)
        
    except Exception as e:
        affectionate_name = get_affectionate_name(user_name)
        await update.message.reply_text(f"{affectionate_name}, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìç –û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

if __name__ == "__main__":
    main()
