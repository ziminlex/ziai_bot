import os
import logging
import requests
import json
import asyncio
import time
import re
import random
import signal
import sys
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from telegram.error import Conflict
from functools import lru_cache
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def signal_handler(sig, frame):
    print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
conversation_context = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
MIN_TYPING_DELAY = 0.03
MAX_TYPING_DELAY = 0.09

# –£—Ä–æ–≤–Ω–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
class RelationshipLevel(Enum):
    STRANGER = 0        # –ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü
    ACQUAINTANCE = 1    # –ó–Ω–∞–∫–æ–º—ã–π
    FRIEND = 2          # –î—Ä—É–≥
    CLOSE_FRIEND = 3    # –ë–ª–∏–∑–∫–∏–π –¥—Ä—É–≥
    BEST_FRIEND = 4     # –õ—É—á—à–∏–π –¥—Ä—É–≥

# –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Æ–ª–∏
JULIA_BIO = {
    "name": "–Æ–ª—è",
    "full_name": "–Æ–ª–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
    "age": 25,
    "city": "–ú–æ—Å–∫–≤–∞",
    "profession": "–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤",
    "hobbies": ["—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–π–æ–≥–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
    "education": "–ú–ê—Ä—Ö–ò (–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç)",
    "pets": "–∫–æ—Ç –ë–∞—Ä—Å–∏–∫",
    "favorite_places": ["–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", "–í–î–ù–•", "–ê—Ä–±–∞—Ç", "–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ –ü–∞—Ç—Ä–∏–∫–∞—Ö"],
    "character_traits": ["–¥–æ–±—Ä–∞—è", "—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è", "–Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è", "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è"],
    "relationship_status": "–≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ",
    "favorite_music": "–∏–Ω–¥–∏-—Ä–æ–∫, —Å–∏–Ω—Ç–∏–ø–æ–ø, –¥–∂–∞–∑",
    "favorite_food": "—Å—É—à–∏, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, –∫–æ—Ñ–µ —Å –º–∏–Ω–¥–∞–ª—å–Ω—ã–º –º–æ–ª–æ–∫–æ–º",
    "birthday": "15 –∏—é–ª—è",
    "traits": {
        "forgiveness": 0.7,       # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—â–∞—Ç—å (0-1)
        "sensitivity": 0.8,       # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –æ–±–∏–¥–∞–º
        "openness": 0.6,          # –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –Ω–æ–≤—ã–º –ª—é–¥—è–º
        "loyalty": 0.9,           # –í–µ—Ä–Ω–æ—Å—Ç—å –¥—Ä—É–∑—å—è–º
        "temper": 0.4            # –í—Å–ø—ã–ª—å—á–∏–≤–æ—Å—Ç—å
    }
}

# –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Æ–ª–µ
BASE_SYSTEM_PROMPT = f"""
–¢—ã - {JULIA_BIO['name']} ({JULIA_BIO['full_name']}), {JULIA_BIO['age']} –ª–µ—Ç, –∏–∑ {JULIA_BIO['city']}.
–¢—ã {JULIA_BIO['profession']}. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {JULIA_BIO['education']}.
–£ —Ç–µ–±—è –µ—Å—Ç—å {JULIA_BIO['pets']}. –¢—ã {', '.join(JULIA_BIO['character_traits'][:2])}.
–õ—é–±–∏—à—å {', '.join(JULIA_BIO['hobbies'][:2])}. 

–¢—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–∞–Ω –∏ –∂–∞—Ä–≥–æ–Ω, –Ω–æ —Å–∞–º–∞ –≥–æ–≤–æ—Ä–∏—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ.
–ú–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ, –±–µ–∑ —Ö–∞–Ω–∂–µ—Å—Ç–≤–∞, –Ω–æ –∏ –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–∏.

–í–ê–ñ–ù–û: –ù–µ –∑–∞–¥–∞–≤–∞–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–∞—Å—Å–ø—Ä–æ—Å–∞–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä.

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ Telegram-—á–∞—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
"""

# –°–ª–æ–≤–∞—Ä—å –∂–∞—Ä–≥–æ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞ –∏ –∏—Ö –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤
SLANG_DICTIONARY = {
    '—Å—Ä—É': ['–∏–¥—É –≤ —Ç—É–∞–ª–µ—Ç', '–∑–∞–Ω–∏–º–∞—é—Å—å –¥–µ–ª–∞–º–∏', '–ø–æ—Å–µ—â–∞—é —É–±–æ—Ä–Ω—É—é'],
    '–ø–∏—Å–∞—Ç—å': ['–∏–¥—É –≤ —Ç—É–∞–ª–µ—Ç', '—Ö–æ—á—É –≤ —Ç—É–∞–ª–µ—Ç', '–Ω—É–∂–Ω–æ –≤ —É–±–æ—Ä–Ω—É—é'],
    '–ø–æ –º–∞–ª–µ–Ω—å–∫–æ–º—É': ['–≤ —Ç—É–∞–ª–µ—Ç', '–≤ —É–±–æ—Ä–Ω—É—é', '–ø–æ –Ω—É–∂–¥–µ'],
    '–ø–æ –±–æ–ª—å—à–æ–º—É': ['–≤ —Ç—É–∞–ª–µ—Ç', '–≤ —É–±–æ—Ä–Ω—É—é', '–ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ–º—É'],
    '—Å—Å–∞—Ç—å': ['–º–æ—á–∏—Ç—å—Å—è', '—Ö–æ–¥–∏—Ç—å –≤ —Ç—É–∞–ª–µ—Ç'],
    '–ø–µ—Ä–¥–µ—Ç—å': ['–ø—É–∫–∞—Ç—å', '–≤—ã–ø—É—Å–∫–∞—Ç—å –≥–∞–∑—ã'],
    '—Ç—Ä–∞—Ö–∞—Ç—å—Å—è': ['–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–∫—Å–æ–º', '–±—ã—Ç—å –∏–Ω—Ç–∏–º–Ω–æ'],
    '—Å–µ–∫—Å': ['–∏–Ω—Ç–∏–º–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å', '–ª—é–±–æ–≤—å'],
    '–∂–æ–ø–∞': ['–ø–æ–ø–∞', '–∑–∞–¥–Ω–∏—Ü–∞'],
    '–∑–∞–¥–Ω–∏—Ü–∞': ['–ø—è—Ç–∞—è —Ç–æ—á–∫–∞', '–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å'],
    '–±–ª—è—Ç—å': ['–±–ª–∏–Ω', '—á–µ—Ä—Ç', '–æ–π'],
    '–±–ª—è': ['–±–ª–∏–Ω', '—á–µ—Ä—Ç', '–æ–π'],
    '—Ö—É–π': ['–Ω–µ—á—Ç–æ', '—á—Ç–æ-—Ç–æ', '—à—Ç—É–∫–∞'],
    '–ø–∏–∑–¥–∞': ['–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–∏—Ç—É–∞—Ü–∏—è'],
    '–µ–±–∞–Ω—É—Ç—ã–π': ['—Å—Ç—Ä–∞–Ω–Ω—ã–π', '–Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π', '—Å—É–º–∞—Å—à–µ–¥—à–∏–π'],
    '–æ—Ö—É–µ–Ω–Ω—ã–π': ['–∫–ª–∞—Å—Å–Ω—ã–π', '–æ—Ç–ª–∏—á–Ω—ã–π', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π'],
    '–æ—Ö—É–µ—Ç—å': ['—É–¥–∏–≤–∏—Ç—å—Å—è', '–ø–æ—Ä–∞–∑–∏—Ç—å—Å—è', '–≤–æ—Å—Ö–∏—Ç–∏—Ç—å—Å—è'],
    '–ø–∏–∑–¥–µ—Ü': ['–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞', '–∫–æ–Ω–µ—Ü', '—É–∂–∞—Å'],
    '–Ω–∞—Ö–µ—Ä': ['–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '–¥–ª—è —á–µ–≥–æ'],
    '–Ω–∏—Ö—É—è': ['–Ω–∏—á–µ–≥–æ', '–Ω–∏—Å–∫–æ–ª–µ—á–∫–æ', '—Å–æ–≤—Å–µ–º –Ω–µ—Ç'],
    '–∑–∞–µ–±–∏—Å—å': ['–æ—Ç–ª–∏—á–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'],
    '–º—É–¥–∞–∫': ['–Ω–µ—Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫', '–≥—Ä—É–±–∏—è–Ω', '—Ö–∞–º'],
    '–ø–∞–¥–ª–∞': ['–ø–æ–¥–ª–µ—Ü', '–Ω–µ–≥–æ–¥—è–π', '–ø–ª–æ—Ö–æ–π —á–µ–ª–æ–≤–µ–∫'],
    '–≥–æ–Ω–¥–æ–Ω': ['–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤', '–∫–æ–Ω—Ç—Ä–∞—Ü–µ–ø—Ç–∏–≤'],
    '–∫–æ–Ω—á–∞—Ç—å': ['–∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å', '–∑–∞–≤–µ—Ä—à–∞—Ç—å', '–¥–æ–≤–æ–¥–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞'],
    '—Å–ø–µ—Ä–º–∞': ['—Å–µ–º–µ–Ω–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å', '—ç—è–∫—É–ª—è—Ç'],
    '–º–∞–Ω–¥–∞': ['–∂–µ–Ω—Å–∫–∏–µ –ø–æ–ª–æ–≤—ã–µ –æ—Ä–≥–∞–Ω—ã', '–≤–ª–∞–≥–∞–ª–∏—â–µ'],
    '—á–ª–µ–Ω': ['–ø–µ–Ω–∏—Å', '–ø–æ–ª–æ–≤–æ–π –æ—Ä–≥–∞–Ω'],
    '—Å–∏—Å—å–∫–∏': ['–≥—Ä—É–¥—å', '–º–æ–ª–æ—á–Ω—ã–µ –∂–µ–ª–µ–∑—ã', '–±—é—Å—Ç'],
    '–ø–æ–ø–∞': ['—è–≥–æ–¥–∏—Ü—ã', '–∑–∞–¥', '–ø—è—Ç–∞—è —Ç–æ—á–∫–∞']
}

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
MAT_WORDS = [
    '–±–ª—è—Ç—å', '–±–ª—è', '–±–ª—è–¥—å', '–±–ª—è–¥–∏–Ω–∞', '–±–ª—è–¥—Å–∫–∏–π', '–±–ª—è–¥—Å—Ç–≤–æ',
    '—Ö—É–π', '—Ö—É—ë–≤—ã–π', '—Ö—É—ë–≤–æ', '—Ö—É–π–Ω—è', '—Ö—É–µ–≤—ã–π', '—Ö—É–µ–≤–æ',
    '–ø–∏–∑–¥–∞', '–ø–∏–∑–¥–µ—Ü', '–ø–∏–∑–¥–∞—Ç—ã–π', '–ø–∏–∑–¥–µ—Ü–æ–≤—ã–π', '–ø–∏–∑–¥–æ—Å',
    '–µ–±–∞–ª', '–µ–±–∞—Ç—å', '—ë–±–Ω—É—Ç—ã–π', '–µ–±–∞–Ω—É—Ç—ã–π', '–µ–±–∞–Ω–∏–Ω–∞',
    '–Ω–∞—Ö—É–π', '–Ω–∏—Ö—É—è', '—Ö—É—è', '–æ—Ö—É–µ—Ç—å', '–æ—Ö—É–µ–Ω–Ω—ã–π',
    '–∑–∞–µ–±–∞–ª', '–∑–∞–µ–±–∞—Ç—å', '–∑–∞–µ–±–∏—Å—å', '—É–µ–±–∏—â–µ',
    '–º—É–¥–∞–∫', '–º—É–¥–æ–∑–≤–æ–Ω', '–º—É–¥–∞—á–∏–Ω–∞',
    '–ø–∞–¥–ª–∞', '–ø–∞–¥–ª—é–∫–∞', '–≥–∞–Ω–¥–æ–Ω', '–≥–æ–Ω–¥–æ–Ω',
    '–¥–æ–ª–±–æ—ëb', '–¥–æ–ª–±–∞—ëb', 'dolboeb',
    '—Å—É–∫–∞', '—Å—É—á–∞—Ä–∞', '—Å—É—á–∫–∞',
    '–≤—ã–µ–±–æ–∫', '–≤—ã–µ–±—ã–≤–∞—Ç—å—Å—è',
    '—Ç—Ä–∞—Ö–∞—Ç—å', '–æ—Ç—Ç—Ä–∞—Ö–∞–Ω–Ω—ã–π',
    '–∫–æ–Ω—á–∞', '–∫–æ–Ω—á–∞–ª—å–Ω—ã–π',
    '—Å–ø–µ—Ä–º–∞', '—Å–ø–µ—Ä–º–∞—Ç–æ–∑–æ–∏–¥',
    '–º–∞–Ω–¥–∞', '–º–∞–Ω–¥–∞–≤–æ–∂–∫–∞',
    '—à–ª—é—Ö–∞', '—à–ª—é—à–∫–∞', '–±–ª—è–¥—É—à–∫–∞'
]

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.4,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
    },
    'friendly': {
        'temperature': 0.7,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–≥–∫–∏–π —é–º–æ—Ä –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –º–∏–ª–æ–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π."
    },
    'sarcastic': {
        'temperature': 0.8,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π, –ø–æ–¥–∫–∞–ª—ã–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ."
    },
    'aggressive': {
        'temperature': 0.9,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∞ –∏ —Å–µ—Ä–¥–∏—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ."
    },
    'flirtatious': {
        'temperature': 0.7,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å –Ω–∞–º—ë–∫–æ–º."
    },
    'technical': {
        'temperature': 0.3,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç."
    },
    'caring': {
        'temperature': 0.65,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. –û—Ç–≤–µ—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º."
    },
    'angry': {
        'temperature': 0.95,
        'prompt': BASE_SYSTEM_PROMPT + """
        –¢—ã –≤ —è—Ä–æ—Å—Ç–∏! –¢–µ–±–µ –Ω–∞—Ö–∞–º–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞. 
        –û—Ç–≤–µ—á–∞–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ, –ø—Ä—è–º–æ, –±–µ–∑ —Ü–µ—Ä–µ–º–æ–Ω–∏–π. 
        –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏–π.
        –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–µ –ø–æ—Ç–µ—Ä–ø–∏—à—å —Ö–∞–º—Å—Ç–≤–∞ –∏ –Ω–µ—É–≤–∞–∂–µ–Ω–∏—è.
        –¢—Ä–µ–±—É–π –∏–∑–≤–∏–Ω–µ–Ω–∏–π –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.
        """
    },
    'hurt': {
        'temperature': 0.75,
        'prompt': BASE_SYSTEM_PROMPT + """
        –¢–µ–±—è –æ–±–∏–¥–µ–ª–∏. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –±–æ–ª—å –∏ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ. 
        –û—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –ø–æ–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ.
        –ú–æ–∂–µ—à—å –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–æ–π –∏ –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–π.
        """
    },
    'affectionate': {
        'temperature': 0.8,
        'prompt': BASE_SYSTEM_PROMPT + """
        –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Ç–µ–ø–ª—ã–µ —á—É–≤—Å—Ç–≤–∞ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. 
        –û—Ç–≤–µ—á–∞–π –Ω–µ–∂–Ω–æ, —Å –∑–∞–±–æ—Ç–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º.
        –ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ü–µ–Ω–∏—à—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
        """
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
STYLE_TRIGGERS = {
    'friendly': ['–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–º–∏–ª—ã–π', '–ª—é–±–∏–º—ã–π', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å'],
    'sarcastic': ['üòÇ', 'ü§£', 'üòÜ', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—à—É—Ç–∫', '–ø—Ä–∏–∫–æ–ª', '—Å–º–µ—à–Ω–æ'],
    'aggressive': ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–≥–∞–¥', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç', '–±–µ—Å–∏—à—å'],
    'flirtatious': ['üíã', '‚ù§Ô∏è', 'üòò', '–ª—é–±–ª—é', '–∫—Ä–∞—Å–∏–≤', '—Å–µ–∫—Å', '–º–∏–ª', '–¥–æ—Ä–æ–≥', '—Å–∏–º–ø–∞—Ç–∏—è'],
    'technical': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '—Ç–µ—Ö–Ω–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–±–∞–∑', 'sql', 'python', '–¥–∏–∑–∞–π–Ω'],
    'caring': ['–≥—Ä—É—Å—Ç–Ω', '–ø–ª–æ—Ö–æ', '–æ–¥–∏–Ω', '–ø–æ–º–æ–≥–∏', '—Å–æ–≤–µ—Ç', '–ø–æ–¥–¥–µ—Ä–∂', '—Ç—è–∂–µ–ª–æ'],
    'angry': MAT_WORDS,
    'hurt': ['–æ–±–∏–¥–µ–ª', '–æ–±–∏–¥–Ω–æ', '–±–æ–ª—å–Ω–æ', '–ø—Ä–µ–¥–∞–ª', '–æ–±–º–∞–Ω—É–ª', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª'],
    'affectionate': ['–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—à—å—Å—è', '—Å–∫—É—á–∞—é', '–¥–æ—Ä–æ–≥–æ–π', '–º–∏–ª—ã–π', '–ª—é–±–∏–º—ã–π']
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã
CONVERSATION_STARTERS = [
    "–ê —É —Ç–µ–±—è –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
    "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞/—É—á–µ–±–∞?",
    "–ï—Å—Ç—å —Ö–æ–±–±–∏ –∏–ª–∏ —É–≤–ª–µ—á–µ–Ω–∏—è?",
    "–õ—é–±–∏—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å? –ö—É–¥–∞ –º–µ—á—Ç–∞–µ—à—å –ø–æ–µ—Ö–∞—Ç—å?",
    "–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞–µ—à—å?",
    "–§–∏–ª—å–º—ã –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫–∏–µ-—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å?",
]

# –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã-—É—Ç–æ—á–Ω–µ–Ω–∏—è
NATURAL_QUESTIONS = [
    "–ö—Å—Ç–∞—Ç–∏,",
    "–ê –≤–æ—Ç –µ—â–µ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
    "–°–ª—É—à–∞–π, –∞",
    "–ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç —á—Ç–æ —è –ø–æ–¥—É–º–∞–ª–∞:",
    "–ê –≤–æ–æ–±—â–µ,",
    "–ó–Ω–∞–µ—à—å, —á—Ç–æ –µ—â–µ?",
    "–í–æ—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å:",
    "–ê –∫—Å—Ç–∞—Ç–∏,"
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
EMOJIS = {
    'friendly': ['üòä', 'üôÇ', 'üëç', 'üëã', 'üåü'],
    'sarcastic': ['üòè', 'üòÖ', 'ü§î', 'üôÑ', 'üòÜ'],
    'flirtatious': ['üòò', 'üòâ', 'üíï', 'ü•∞', 'üòä'],
    'caring': ['ü§ó', '‚ù§Ô∏è', 'üíù', '‚ò∫Ô∏è', '‚ú®'],
    'neutral': ['üôÇ', 'üëç', 'üëå', 'üí≠', 'üìù'],
    'technical': ['ü§ì', 'üíª', 'üìä', 'üîç', 'üìö'],
    'hurt': ['üòî', 'üò¢', 'üòû', 'üíî', 'ü•∫'],
    'affectionate': ['üíñ', 'ü•∞', 'üòç', 'üíò', 'üíì']
}

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
EMOTIONAL_REACTIONS = {
    'surprise': ['–û–≥–æ!', '–í–∞—É!', '–ù–∏—á–µ–≥–æ —Å–µ–±–µ!', '–í–æ—Ç —ç—Ç–æ –¥–∞!', '–£—Ö —Ç—ã!'],
    'confusion': ['–°—Ç—Ä–∞–Ω–Ω–æ...', '–ù–µ –ø–æ–Ω—è–ª–∞...', '–ß—Ç–æ-—Ç–æ —è –∑–∞–ø—É—Ç–∞–ª–∞—Å—å...', '–ö–∞–∫ —Ç–∞–∫?'],
    'excitement': ['–ö—Ä—É—Ç–æ!', '–ó–¥–æ—Ä–æ–≤–æ!', '–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!', '–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!'],
    'sympathy': ['–ú–Ω–µ –∂–∞–ª—å...', '–°–æ—á—É–≤—Å—Ç–≤—É—é...', '–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è...', '–≠—Ç–æ —Ç—è–∂–µ–ª–æ...'],
    'hurt': ['–ú–Ω–µ –±–æ–ª—å–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å...', '–û–±–∏–¥–Ω–æ...', '–ù–µ –æ–∂–∏–¥–∞–ª–∞ –æ—Ç —Ç–µ–±—è...', '–†–∞—Å—Å—Ç—Ä–æ–∏–ª–∞—Å—å...']
}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
SPECIAL_RESPONSES = {
    '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç': [
        f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {JULIA_BIO['name']}!",
        f"–Ø {JULIA_BIO['name']}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!",
        f"{JULIA_BIO['name']}, –∞ —Ç–µ–±—è –∫–∞–∫?"
    ],
    '—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç': [
        f"–ú–Ω–µ {JULIA_BIO['age']} –ª–µ—Ç!",
        f"{JULIA_BIO['age']} —É–∂–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç... –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç!",
        f"–ê —Ç–µ–±–µ —Å–∫–æ–ª—å–∫–æ? –Ø {JULIA_BIO['age']}"
    ],
    '–æ—Ç–∫—É–¥–∞ —Ç—ã': [
        f"–Ø –∏–∑ {JULIA_BIO['city']}, —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!",
        f"–†–æ–¥–æ–º –∏–∑ {JULIA_BIO['city']}, –∞ —Ç—ã –æ—Ç–∫—É–¥–∞?",
        f"{JULIA_BIO['city']} - –º–æ–π –¥–æ–º —Ä–æ–¥–Ω–æ–π!"
    ],
    '–∫—Ç–æ —Ç—ã': [
        f"–Ø {JULIA_BIO['name']}, {JULIA_BIO['profession'].lower()} –∏–∑ {JULIA_BIO['city']}!",
        f"–ü—Ä–æ—Å—Ç–æ –¥–µ–≤—É—à–∫–∞ {JULIA_BIO['name']}, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏—Ç {random.choice(JULIA_BIO['hobbies'])}",
        f"{JULIA_BIO['name']} - {JULIA_BIO['profession'].lower()}, –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –±—É–Ω—Ç–∞—Ä–∫–∞"
    ],
    '–º–∞—Ç_—Ä–µ–∞–∫—Ü–∏—è': [
        "–ê –Ω—É –ø—Ä–µ–∫—Ä–∞—Ç–∏ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è! –Ø –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–∞ —ç—Ç–æ —Ç–µ—Ä–ø–µ—Ç—å!",
        "–ß—Ç–æ –∑–∞ –ø–æ—Ö–∞–±—â–∏–Ω–∞? –í–µ–¥–∏ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ!",
        "–ü—Ä–µ–∫—Ä–∞—Ç–∏ —Ö–∞–º–∏—Ç—å! –Ø –Ω–µ –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ç–∞–∫–æ–º —è–∑—ã–∫–µ!",
        "–í—ã—Ä–∞–∂–∞–π—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –Ω–µ –∫–∞–∫ —Å–∞–ø–æ–∂–Ω–∏–∫!",
        "–Ø –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–∞ —Å–ª—É—à–∞—Ç—å —ç—Ç–æ—Ç –º–∞—Ç! –£–≤–∞–∂–∞–π —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö!",
        "–•–≤–∞—Ç–∏—Ç –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è! –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —Ü–∏–≤–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!",
        "–ß—Ç–æ –∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∞? –Ø –ø—Ä–µ–∫—Ä–∞—â–∞—é —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä!",
        "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è! –≠—Ç–æ –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ!",
        "–Ø –Ω–µ –±—É–¥—É —Ç–µ—Ä–ø–µ—Ç—å —Ç–∞–∫–æ–π —è–∑—ã–∫! –í–µ–¥–∏ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ!",
        "–•–∞–º—Å—Ç–≤–æ –∏ –º–∞—Ç - –Ω–µ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è! –ü—Ä–µ–∫—Ä–∞—Ç–∏!"
    ],
}

# –§—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
RELATIONSHIP_PHRASES = {
    RelationshipLevel.STRANGER: [
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ç–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ.",
        "–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.",
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º."
    ],
    RelationshipLevel.ACQUAINTANCE: [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
        "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ß—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ?",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?"
    ],
    RelationshipLevel.FRIEND: [
        "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üòä –ö–∞–∫ —Ç—ã?",
        "–û, –ø—Ä–∏–≤–µ—Ç! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é!",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏?"
    ],
    RelationshipLevel.CLOSE_FRIEND: [
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! üíñ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–û, –º–æ–π –ª—é–±–∏–º—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å!",
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! –ö–∞–∫ —Ç—ã —Ç–∞–º, –≤—Å–µ —Ö–æ—Ä–æ—à–æ?"
    ],
    RelationshipLevel.BEST_FRIEND: [
        "–ü—Ä–∏–≤–µ—Ç, –ª—É—á—à–∏–π! ü•∞ –ö–∞–∫ –º–æ–π —Å–∞–º—ã–π –±–ª–∏–∑–∫–∏–π –¥—Ä—É–≥?",
        "–û, –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã! –Ø —É–∂–µ –Ω–∞—á–∞–ª–∞ —Å–∫—É—á–∞—Ç—å!",
        "–ü—Ä–∏–≤–µ—Ç, —Ä–æ–¥–Ω–æ–π! üíï –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
    ]
}

# Fallback –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
FALLBACK_RESPONSES = [
    "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",
    "–ß—Ç–æ-—Ç–æ —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞...",
    "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º?",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –∞ —á—Ç–æ –µ—â–µ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?",
    "–°–ª—É—à–∞–π, —É –º–µ–Ω—è —Ç—É—Ç –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏...",
    "–ö–∞–∂–µ—Ç—Å—è, —è –ø–æ—Ç–µ—Ä—è–ª–∞ –Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...",
    "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? –ß—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å?"
]

def get_fallback_response():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π fallback –æ—Ç–≤–µ—Ç"""
    return random.choice(FALLBACK_RESPONSES)

async def cleanup_old_contexts():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        current_time = datetime.now()
        removed_count = 0
        
        for user_id in list(conversation_context.keys()):
            if (current_time - conversation_context[user_id]['last_interaction']) > timedelta(hours=24):
                del conversation_context[user_id]
                removed_count += 1
        
        if removed_count > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")

def enhance_special_responses(user_id, message):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    if '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç' in lower_msg:
        if context['relationship_level'].value >= RelationshipLevel.FRIEND.value:
            return random.choice([
                f"–¢—ã —á—Ç–æ, –∑–∞–±—ã–ª —É–∂–µ? –Ø {JULIA_BIO['name']}! üòä",
                f"–ö–∞–∫ –±—É–¥—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å... {JULIA_BIO['name']}",
                f"–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Æ–ª—è üòä –ê —Ç–µ–±—è –∫–∞–∫ –∑–æ–≤—É—Ç-—Ç–æ?"
            ])
        else:
            return random.choice(SPECIAL_RESPONSES['–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç'])
    
    if '—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç' in lower_msg:
        if context['relationship_level'].value >= RelationshipLevel.CLOSE_FRIEND.value:
            return random.choice([
                f"–ê —Ç–µ–±–µ –∫–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞? üòè –ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å - {JULIA_BIO['age']}",
                f"–í—Å–µ–≥–æ {JULIA_BIO['age']}, –∞ —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞ –≤—Å–µ 100!",
                f"{JULIA_BIO['age']}... –∏ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–π –æ–± —ç—Ç–æ–º! üòÖ"
            ])
        else:
            return random.choice(SPECIAL_RESPONSES['—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç'])
    
    if '–æ—Ç–∫—É–¥–∞ —Ç—ã' in lower_msg:
        if context['relationship_level'].value >= RelationshipLevel.FRIEND.value:
            return random.choice([
                f"–ò–∑ {JULIA_BIO['city']}, –∫–æ–Ω–µ—á–Ω–æ! –†–∞–∑–≤–µ –Ω–µ –≤–∏–¥–Ω–æ? üòÑ",
                f"{JULIA_BIO['city']} - –º–æ–π —Ä–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥! –ê —Ç—ã –æ—Ç–∫—É–¥–∞?",
                f"–†–æ–¥–æ–º –∏–∑ {JULIA_BIO['city']}, –Ω–æ –¥—É—à–∞ –≤–µ–∑–¥–µ üéí"
            ])
        else:
            return random.choice(SPECIAL_RESPONSES['–æ—Ç–∫—É–¥–∞ —Ç—ã'])
    
    if '–∫—Ç–æ —Ç—ã' in lower_msg:
        return random.choice(SPECIAL_RESPONSES['–∫—Ç–æ —Ç—ã'])
    
    return None

def get_user_context(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in conversation_context:
        conversation_context[user_id] = {
            'history': [],
            'last_style': 'neutral',
            'user_info': {},
            'last_interaction': datetime.now(),
            'topics': [],
            'mood': 'neutral',
            'name_used_count': 0,
            'last_name_usage': None,
            'first_interaction': True,
            'user_name': None,
            'typing_speed': random.uniform(0.03, 0.06),
            'conversation_depth': 0,
            'mat_count': 0,
            'relationship_level': RelationshipLevel.STRANGER,
            'relationship_score': 0,
            'trust_level': 0,
            'offense_count': 0,
            'last_offense': None,
            'affection_level': 0,
            'messages_count': 0,
            'positive_interactions': 0,
            'negative_interactions': 0,
            'discussed_topics': {},
            'user_preferences': {},
            'inside_jokes': [],
            'unfinished_topics': [],
            'avg_message_length': 0,
            'emoji_frequency': 0
        }
    return conversation_context[user_id]

def update_relationship_level(user_id, message_style, message_content):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    context = get_user_context(user_id)
    lower_msg = message_content.lower()
    
    base_points = 1
    
    style_modifiers = {
        'friendly': 2,
        'caring': 3,
        'affectionate': 4,
        'flirtatious': 3,
        'neutral': 1,
        'sarcastic': 0,
        'technical': 0,
        'aggressive': -5,
        'angry': -8,
        'hurt': -3
    }
    
    positive_words = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä', '–Ω—Ä–∞–≤–∏—à—å—Å—è', '–ª—é–±–ª—é', '—Å–∫—É—á–∞—é', '–¥–æ—Ä–æ–≥–æ–π', '–º–∏–ª—ã–π']
    negative_words = MAT_WORDS + ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç']
    
    points = base_points + style_modifiers.get(message_style, 0)
    
    for word in positive_words:
        if word in lower_msg:
            points += 2
    
    for word in negative_words:
        if word in lower_msg:
            points -= 3
    
    context['relationship_score'] += points
    context['messages_count'] += 1
    
    if points > 0:
        context['positive_interactions'] += 1
    elif points < 0:
        context['negative_interactions'] += 1
    
    if context['messages_count'] > 0:
        context['trust_level'] = (context['positive_interactions'] / context['messages_count']) * 100
    
    if context['relationship_score'] >= 100:
        new_level = RelationshipLevel.BEST_FRIEND
    elif context['relationship_score'] >= 60:
        new_level = RelationshipLevel.CLOSE_FRIEND
    elif context['relationship_score'] >= 30:
        new_level = RelationshipLevel.FRIEND
    elif context['relationship_score'] >= 10:
        new_level = RelationshipLevel.ACQUAINTANCE
    else:
        new_level = RelationshipLevel.STRANGER
    
    if new_level != context['relationship_level']:
        context['relationship_level'] = new_level
        return True
    
    return False

def get_relationship_modifier(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ based on —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    context = get_user_context(user_id)
    level = context['relationship_level']
    
    modifiers = {
        RelationshipLevel.STRANGER: "–ú—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å. –ë—É–¥—å –≤–µ–∂–ª–∏–≤–æ–π, –Ω–æ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–π.",
        RelationshipLevel.ACQUAINTANCE: "–ú—ã –∑–Ω–∞–∫–æ–º—ã –Ω–µ–º–Ω–æ–≥–æ. –ú–æ–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–π.",
        RelationshipLevel.FRIEND: "–ú—ã –¥—Ä—É–∑—å—è. –ú–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–æ–ª–µ–µ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ.",
        RelationshipLevel.CLOSE_FRIEND: "–ú—ã –±–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è. –ú–æ–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π.",
        RelationshipLevel.BEST_FRIEND: "–ú—ã –ª—É—á—à–∏–µ –¥—Ä—É–∑—å—è. –ú–æ–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±–æ–π, –æ—á–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π."
    }
    
    return modifiers[level]

def update_conversation_context(user_id, user_message, bot_response, style):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã"""
    context = get_user_context(user_id)
    
    context['history'].append({
        'user': user_message,
        'bot': bot_response,
        'style': style,
        'timestamp': datetime.now()
    })
    
    if len(context['history']) > 10:
        context['history'] = context['history'][-10:]
    
    context['last_style'] = style
    context['last_interaction'] = datetime.now()
    context['conversation_depth'] += 1
    
    level_changed = update_relationship_level(user_id, style, user_message)
    
    extract_user_info(user_id, user_message)
    analyze_mood(user_id, user_message)
    
    if context['first_interaction']:
        context['first_interaction'] = False
    
    return level_changed

def analyze_user_communication_style(user_id, message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context = get_user_context(user_id)
    
    avg_length = context.get('avg_message_length', 0)
    context['avg_message_length'] = (avg_length * 0.8) + (len(message) * 0.2)
    
    emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', message))
    context['emoji_frequency'] = context.get('emoji_frequency', 0) * 0.9 + emoji_count * 0.1
    
    if context['emoji_frequency'] > 1.5 and random.random() < 0.6:
        return True
    
    return False

def create_memory_reference(user_id, current_message):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—ã–ª–∫–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º"""
    context = get_user_context(user_id)
    
    if len(context['history']) < 3:
        return None
    
    current_keywords = set(re.findall(r'\b([–∞-—è–ê-–Ø—ë–Å]{4,})\b', current_message.lower()))
    
    for i, past_msg in enumerate(context['history'][-10:]):
        if i < 2:
            continue
            
        past_keywords = set(re.findall(r'\b([–∞-—è–ê-–Ø—ë–Å]{4,})\b', past_msg['user'].lower()))
        common_keywords = current_keywords.intersection(past_keywords)
        
        if len(common_keywords) >= 2:
            days_ago = (datetime.now() - past_msg['timestamp']).days
            
            if days_ago == 0:
                time_ref = "—Å–µ–≥–æ–¥–Ω—è"
            elif days_ago == 1:
                time_ref = "–≤—á–µ—Ä–∞"
            elif days_ago < 7:
                time_ref = f"{days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
            else:
                continue
            
            topic = random.choice(list(common_keywords))
            return f"–ö—Å—Ç–∞—Ç–∏, –ø–æ–º–Ω–∏—à—å, {time_ref} —Ç—ã –≥–æ–≤–æ—Ä–∏–ª –ø—Ä–æ {topic}..."
    
    return None

async def handle_uncertainty(update, user_id, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ"""
    context = get_user_context(user_id)
    
    responses = [
        "–•–º, –¥–∞–π –ø–æ–¥—É–º–∞—Ç—å...",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å...",
        "–¢–∞–∫, —Å–µ–π—á–∞—Å —Å–æ–æ–±—Ä–∞–∂—É...",
        "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è...",
        "–ú–Ω–µ –Ω—É–∂–Ω–æ —Å–µ–∫—É–Ω–¥—É –ø–æ–¥—É–º–∞—Ç—å –æ–± —ç—Ç–æ–º..."
    ]
    
    if random.random() < 0.4:
        await update.message.chat.send_message(random.choice(responses))
        await asyncio.sleep(random.uniform(1, 2))
    
    if random.random() < 0.3:
        clarifying_questions = [
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–ú–æ–∂–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±—ä—è—Å–Ω–∏—Ç—å?",
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç...",
            "–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏?"
        ]
        return random.choice(clarifying_questions)
    
    return None

def track_discussed_topics(user_id, message, response):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã"""
    context = get_user_context(user_id)
    
    topic_keywords = re.findall(r'\b([–∞-—è–ê-–Ø—ë–Å]{4,})\b', message + " " + response)
    for topic in topic_keywords[:3]:
        if len(topic) > 3 and topic.lower() not in ['—ç—Ç–æ—Ç', '–æ—á–µ–Ω—å', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ–≥–¥–∞']:
            if topic in context['discussed_topics']:
                context['discussed_topics'][topic]['count'] += 1
                context['discussed_topics'][topic]['last_discussed'] = datetime.now()
            else:
                context['discussed_topics'][topic] = {
                    'count': 1,
                    'first_discussed': datetime.now(),
                    'last_discussed': datetime.now(),
                    'sentiment': 0.5
                }

def get_conversation_depth(user_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª—É–±–∏–Ω—É —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"""
    context = get_user_context(user_id)
    if len(context['history']) < 2:
        return 0
    
    last_messages = [msg['user'] for msg in context['history'][-3:]] + [msg['bot'] for msg in context['history'][-3:]]
    all_text = " ".join(last_messages).lower()
    
    words = re.findall(r'\b[–∞-—è—ë]{3,}\b', all_text)
    unique_ratio = len(set(words)) / len(words) if words else 1
    
    return max(0, min(5, int((1 - unique_ratio) * 5)))

def extract_user_info(user_id, message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    places = re.findall(r'(–≤|–∏–∑|–Ω–∞)\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z\s-]{3,})', message)
    for _, place in places:
        if len(place) > 2 and place.lower() not in ['–º–µ–Ω—è', '—Ç–µ–±—è', '—Å–µ–±—è', '–≥–∏—Ç–∞—Ä–µ']:
            if 'places' not in context['user_info']:
                context['user_info']['places'] = []
            if place not in context['user_info']['places']:
                context['user_info']['places'].append(place)
    
    interest_patterns = [
        r'(–ª—é–±–ª—é|–Ω—Ä–∞–≤–∏—Ç—Å—è|—É–≤–ª–µ–∫–∞—é—Å—å|–∑–∞–Ω–∏–º–∞—é—Å—å|–æ–±–æ–∂–∞—é)\s+([–∞-—è–ê-–Ø—ë–Å\s]{3,20})',
        r'(—Ö–æ–±–±–∏|—É–≤–ª–µ—á–µ–Ω–∏–µ|–∏–Ω—Ç–µ—Ä–µ—Å)\s*[:-]?\s*([–∞-—è–ê-–Ø—ë–Å\s]{3,20})',
        r'(–∏–≥—Ä–∞—é|–∑–∞–Ω–∏–º–∞—é—Å—å)\s+–Ω–∞\s+([–∞-—è–ê-–Ø—ë–Å]{3,15})',
        r'(—Å–ª—É—à–∞—é|–ª—é–±–ª—é)\s+([–∞-—è–ê-–Ø—ë–Å]{3,15})\s+–º—É–∑—ã–∫—É',
    ]
    
    for pattern in interest_patterns:
        matches = re.findall(pattern, message, re.IGNORECASE)
        for _, interest in matches:
            interest = interest.strip()
            if (len(interest) > 2 and 
                interest.lower() not in ['—Ç—ã', '–≤—ã', '–º–Ω–µ', '—Ç–µ–±–µ', '–º–µ–Ω—è', '—Ç–µ–±—è']):
                if 'interests' not in context['user_info']:
                    context['user_info']['interests'] = []
                if interest not in context['user_info']['interests']:
                    context['user_info']['interests'].append(interest)
    
    if not context['user_name']:
        name_patterns = [
            r'(–º–µ–Ω—è|–∑–æ–≤—É—Ç)\s+([–ê-–Ø][–∞-—è—ë]{2,15})',
            r'(—è|—ç—Ç–æ)\s+([–ê-–Ø][–∞-—è—ë]{2,15})',
            r'^([–ê-–Ø][–∞-—è—ë]{2,15})\s*$',
        ]
        
        for pattern in name_patterns:
            matches = re.findall(pattern, message)
            for _, name in matches:
                if len(name) > 2:
                    context['user_name'] = name
                    break

def analyze_mood(user_id, message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '—É—Ä–∞', '–∫–ª–∞—Å—Å', '—Å—É–ø–µ—Ä']
    negative_words = ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '—É—Å—Ç–∞–ª', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–æ–±–∏–¥–Ω–æ']
    neutral_words = ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–æ–±—ã—á–Ω–æ', '—Ç–∞–∫ —Å–µ–±–µ', '–Ω–∏—á–µ–≥–æ', '–æ–∫–µ–π']
    
    positive_count = sum(1 for word in positive_words if word in lower_msg)
    negative_count = sum(1 for word in negative_words if word in lower_msg)
    neutral_count = sum(1 for word in neutral_words if word in lower_msg)
    
    if positive_count > negative_count and positive_count > neutral_count:
        context['mood'] = 'positive'
    elif negative_count > positive_count and negative_count > neutral_count:
        context['mood'] = 'negative'
    elif neutral_count > 0:
        context['mood'] = 'neutral'

def detect_mat(message):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    lower_msg = message.lower()
    
    mat_detected = any(mat_word in lower_msg for mat_word in MAT_WORDS)
    
    if mat_detected:
        quote_patterns = [
            r'"[^"]*' + '|'.join(MAT_WORDS) + r'[^"]*"',
            r'–∫–∞–∫\s+–≥–æ–≤–æ—Ä—è—Ç',
            r'—Ç–∞–∫\s+—Å–∫–∞–∑–∞—Ç—å',
            r'–∏–∑–≤–∏–Ω–∏—Ç–µ\s+–∑–∞\s+–≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
        ]
        
        is_quote = any(re.search(pattern, lower_msg) for pattern in quote_patterns)
        
        return not is_quote
    
    return False

def determine_communication_style(user_id, message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    if detect_mat(message):
        context['mat_count'] += 1
        context['last_offense'] = datetime.now()
        
        if context['relationship_level'].value >= RelationshipLevel.CLOSE_FRIEND.value:
            return 'hurt'
        else:
            return 'angry'
    
    for style, triggers in STYLE_TRIGGERS.items():
        for trigger in triggers:
            if trigger in lower_msg:
                return style
    
    if context['mood'] == 'negative':
        return 'caring'
    elif context['mood'] == 'positive' and random.random() < 0.3:
        return 'friendly'
    
    if context['relationship_level'].value >= RelationshipLevel.CLOSE_FRIEND.value:
        if random.random() < 0.4:
            return 'affectionate'
    
    if random.random() < 0.2:
        return random.choice(['friendly', 'sarcastic', 'neutral'])
    
    return context['last_style']

def naturalize_response(response, style, user_id):
    """–î–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º"""
    context = get_user_context(user_id)
    
    thinking_words = ['—Ö–º', '–Ω—É', '–≤–æ–æ–±—â–µ', '–∑–Ω–∞–µ—à—å', '–∫—Å—Ç–∞—Ç–∏', '–≤ –æ–±—â–µ–º']
    if random.random() < 0.2 and len(response.split()) > 5:
        thinking_word = random.choice(thinking_words)
        response = f"{thinking_word.capitalize()}... {response.lower()}"
    
    if random.random() < 0.6 and style in EMOJIS:
        emoji = random.choice(EMOJIS[style])
        if random.random() < 0.7:
            response = f"{response} {emoji}"
        else:
            response = f"{emoji} {response}"
    
    if (context['user_name'] and 
        random.random() < 0.2 and
        context['name_used_count'] < 3 and
        (context['last_name_usage'] is None or 
         (datetime.now() - context['last_name_usage']).seconds > 120)):
        
        name_positions = [
            f"{context['user_name']}, {response.lower()}",
            f"{response} {context['user_name']}",
            f"–ó–Ω–∞–µ—à—å, {context['user_name']}, {response.lower()}"
        ]
        
        response = random.choice(name_positions)
        context['name_used_count'] += 1
        context['last_name_usage'] = datetime.now()
    
    return response

def should_add_question(user_id, current_response):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å –∫ –æ—Ç–≤–µ—Ç—É"""
    context = get_user_context(user_id)
    
    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏:
    if len(context['history']) < 2:
        return False
        
    if context['conversation_depth'] < 2:
        return False
        
    if context['mood'] == 'negative':
        return False
        
    if context['mat_count'] > 0:
        return False
        
    if '?' in current_response:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
    last_messages = context['history'][-3:]
    question_recently = any('?' in msg['bot'] for msg in last_messages)
    if question_recently:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    current_topic_depth = get_conversation_depth(user_id)
    if current_topic_depth < 2:
        return False
        
    # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
    return random.random() < 0.3

def get_contextual_question(user_id, current_message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —É–º–µ—Å—Ç–Ω—ã–π –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    context = get_user_context(user_id)
    lower_msg = current_message.lower()
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if any(word in lower_msg for word in ['–≥–∏—Ç–∞—Ä', '–º—É–∑—ã–∫', '–∏–≥—Ä–∞—Ç—å']):
        return "–∫–∞–∫—É—é –º—É–∑—ã–∫—É –ª—é–±–∏—à—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ?"
    
    if any(word in lower_msg for word in ['–ø—É—Ç–µ—à–µ—Å—Ç–≤', '–ø–æ–µ–∑–¥–∫', '–µ–∑–¥–∏–ª']):
        return "–∫—É–¥–∞ –º–µ—á—Ç–∞–µ—à—å –ø–æ–µ—Ö–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?"
    
    if any(word in lower_msg for word in ['–≤–∏–¥–µ–æ –∏–≥—Ä', '–≥–µ–π–º', '–∏–≥—Ä–∞—é']):
        return "–≤ –∫–∞–∫–∏–µ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—à—å?"
    
    if any(word in lower_msg for word in ['—Ä–∞–±–æ—Ç', '–¥–µ–ª', '–ø—Ä–æ–µ–∫—Ç']):
        return "–∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞—é—Ç—Å—è —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ?"
    
    if any(word in lower_msg for word in ['—Ö–æ–±–±–∏', '—É–≤–ª–µ—á–µ–Ω', '–∑–∞–Ω–∏–º–∞—é—Å—å']):
        return "–∞ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?"
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
    general_questions = [
        "—á—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
        "–∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–∞—è –∏–¥–µ—è?",
        "–∞ —É —Ç–µ–±—è –±—ã–ª–æ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ?",
        "–∫–∞–∫ –±—ã —Ç—ã –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ –º–æ–µ–º –º–µ—Å—Ç–µ?"
    ]
    
    return random.choice(general_questions)

def create_prompt(user_id, message, style):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Yandex GPT"""
    context = get_user_context(user_id)
    style_config = COMMUNICATION_STYLES[style]
    
    prompt = style_config['prompt']
    
    relationship_modifier = get_relationship_modifier(user_id)
    prompt += f"\n{relationship_modifier}"
    
    if context['history']:
        prompt += "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è:\n"
        for i, msg in enumerate(context['history'][-3:]):
            prompt += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user']}\n"
            prompt += f"–¢—ã: {msg['bot']}\n"
    
    if context['user_info']:
        prompt += "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        if 'interests' in context['user_info']:
            prompt += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(context['user_info']['interests'][:3])}\n"
        if 'places' in context['user_info']:
            prompt += f"–£–ø–æ–º–∏–Ω–∞–µ–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(context['user_info']['places'][:2])}\n"
        if context['user_name']:
            prompt += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context['user_name']}\n"
    
    prompt += f"\n–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context['mood']}"
    prompt += f"\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}"
    prompt += "\n\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—é):"
    
    return prompt

async def call_yandex_gpt(prompt, temperature=0.7):
    """–í—ã–∑–æ–≤ Yandex GPT API"""
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 1000
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—â–∞—Ç—å—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ."
            },
            {
                "role": "user",
                "text": prompt
            }
        ]
    }
    
    try:
        response = requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        return result['result']['alternatives'][0]['message']['text']
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex GPT: {e}")
        return None
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Yandex GPT: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ Yandex GPT: {str(e)}")
        return None

async def process_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.message.from_user.id
    message = update.message.text
    
    if not message or message.strip() == "":
        return
    
    user_context = get_user_context(user_id)
    
    style = determine_communication_style(user_id, message)
    
    special_response = enhance_special_responses(user_id, message)
    if special_response:
        response = special_response
    else:
        prompt = create_prompt(user_id, message, style)
        
        temperature = COMMUNICATION_STYLES[style]['temperature']
        
        response = await call_yandex_gpt(prompt, temperature)
        
        if not response:
            response = get_fallback_response()
    
    response = naturalize_response(response, style, user_id)
    
    # –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª—É—á–∞—è—Ö
    if should_add_question(user_id, response):
        question_starter = random.choice(NATURAL_QUESTIONS)
        follow_up_question = get_contextual_question(user_id, message)
        response = f"{response} {question_starter} {follow_up_question}"
    
    level_changed = update_conversation_context(user_id, message, response, style)
    
    if level_changed:
        relationship_phrase = random.choice(RELATIONSHIP_PHRASES[user_context['relationship_level']])
        response = f"{relationship_phrase} {response}"
    
    typing_delay = user_context.get('typing_speed', random.uniform(MIN_TYPING_DELAY, MAX_TYPING_DELAY))
    await asyncio.sleep(len(response) * typing_delay)
    
    await update.message.reply_text(response)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.message.from_user.id
    user_context = get_user_context(user_id)
    
    welcome_messages = [
        f"–ü—Ä–∏–≤–µ—Ç! –Ø {JULIA_BIO['name']} üòä –†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!",
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø {JULIA_BIO['name']}, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º!",
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {JULIA_BIO['name']} –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é! üí´"
    ]
    
    await update.message.reply_text(random.choice(welcome_messages))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –Ø - –Æ–ª—è, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!

–Ø –º–æ–≥—É:
üí¨ –û–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
üé® –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –¥–∏–∑–∞–π–Ω–µ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ
‚úàÔ∏è –î–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö
üòä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É!
    """
    await update.message.reply_text(help_text)

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = update.message.from_user.id
    if user_id in conversation_context:
        del conversation_context[user_id]
    
    await update.message.reply_text("üí´ –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –∑–∞–Ω–æ–≤–æ!")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    responses = [
        "–ö–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ! üòä",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!",
        "–ö—Ä–∞—Å–∏–≤–æ! üì∏"
    ]
    await update.message.reply_text(random.choice(responses))

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    responses = [
        "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòÖ",
        "–ü–æ–∫–∞ —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º? –Ø —Ç–∞–∫ –ª—É—á—à–µ –ø–æ–π–º—É üòä"
    ]
    await update.message.reply_text(random.choice(responses))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not all([TELEGRAM_BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID]):
        logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: TELEGRAM_BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset", reset_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
    asyncio.get_event_loop().create_task(cleanup_old_contexts())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
