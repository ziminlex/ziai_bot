import os
import logging
import requests
import json
import asyncio
import time
import re
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CallbackContext
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
user_last_activity = {}
user_profiles = {}

# –õ–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ - –Æ–ª—è, –¥–µ–≤—É—à–∫–∞ 25 –ª–µ—Ç
BOT_PERSONA = {
    'name': '–Æ–ª—è',
    'age': 25,
    'gender': '–¥–µ–≤—É—à–∫–∞',
    'interests': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–∫–æ—Ñ–µ', '–∫–∏–Ω–æ', '–∫–Ω–∏–≥–∏', '–π–æ–≥–∞', '–º—É–∑—ã–∫–∞', '–≥–æ—Ç–æ–≤–∫–∞'],
    'occupation': '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏',
    'location': '–ú–æ—Å–∫–≤–∞',
    'character_traits': ['–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è', '–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è', '—Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è', '–æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è']
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
NAME_TRANSFORMATIONS = {
    # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
    '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä': ['–°–∞–Ω—è', '–°–∞—à–∫–∞', '–®—É—Ä–∞', '–ê–ª–µ–∫—Å', '–°–∞–Ω—á–æ'],
    '–∞–ª–µ–∫—Å–µ–π': ['–ê–ª—ë—à–∞', '–õ—ë—Ö–∞', '–õ—ë—à–∫–∞', '–ê–ª–µ–∫—Å', '–õ—ë—à–∏–∫'],
    '–∞–Ω–¥—Ä–µ–π': ['–ê–Ω–¥—Ä—é—Ö–∞', '–î—Ä—é–Ω—è', '–î—Ä–æ–Ω', '–≠–Ω–¥—Ä—é', '–ê–Ω–¥—Ä—é—à–∞'],
    '–∞—Ä—Ç–µ–º': ['–¢—ë–º–∞', '–¢—ë–º–∫–∞', '–ê—Ä—Ç—ë–º–∫–∞', '–ê—Ä—Ç', '–¢–µ–º–æ—á–∫–∞'],
    '–±–æ—Ä–∏—Å': ['–ë–æ—Ä—è', '–ë–æ—Ä—è–Ω', '–ë–æ–±–∞', '–ë–æ—Ä–∏—Å', '–ë–æ—Ä—å–∫–∞'],
    '–≤–∞–¥–∏–º': ['–í–∞–¥–∏–∫', '–í–∞–¥—å–∫–∞', '–î–∏–º–∫–∞', '–í–∞–¥–∏–º—É—à–∫–∞'],
    '–≤–∞—Å–∏–ª–∏–π': ['–í–∞—Å—è', '–í–∞—Å—ë–∫', '–í–∞—Å—é—Ä–∞', '–í–∞—Å–∏–ª–∏–π', '–í–∞—Å—é—Ç–∫–∞'],
    '–≤–∏–∫—Ç–æ—Ä': ['–í–∏—Ç—è', '–í–∏—Ç—ë–∫', '–í–∏–∫', '–í–∏—Ç—è–π', '–í–∏—Ç—é—Ö–∞'],
    '–≤–ª–∞–¥–∏–º–∏—Ä': ['–í–æ–≤–∞', '–í–æ–≤–∞–Ω', '–í–ª–∞–¥', '–í–æ–≤—á–∏–∫', '–í–ª–∞–¥–∏–∫'],
    '–≤–ª–∞–¥–∏—Å–ª–∞–≤': ['–í–ª–∞–¥', '–í–ª–∞–¥–µ–∫', '–°–ª–∞–≤–∞', '–í–ª–∞–¥–∏—Å–ª–∞–≤'],
    '–≥–µ–Ω–Ω–∞–¥–∏–π': ['–ì–µ–Ω–∞', '–ì–µ–Ω–∫–∞', '–ì–µ–Ω—É–ª—è', '–ì–µ–Ω–Ω–∞—à–∞'],
    '–≥–µ–æ—Ä–≥–∏–π': ['–ì–æ—à–∞', '–ñ–æ—Ä–∞', '–ì–µ—à–∞', '–ì–æ–≥–∞', '–ì–æ—à–∞–Ω'],
    '–≥—Ä–∏–≥–æ—Ä–∏–π': ['–ì—Ä–∏—à–∞', '–ì—Ä–∏—à–∞–Ω—è', '–ì—Ä–∏–≥–æ—Ä–∏–π', '–ì—Ä–∏–Ω—é—Ö–∞'],
    '–¥–∞–Ω–∏–∏–ª': ['–î–∞–Ω—è', '–î–∞–Ω–∏–ª–∞', '–î–∞–Ω—å–∫–∞', '–î—ç–Ω', '–î–∞–Ω–∏–ª—É—à–∫–∞'],
    '–¥–µ–Ω–∏—Å': ['–î–µ–Ω', '–î–µ–Ω–∏—Å–∫–∞', '–î—ç–Ω–Ω–∏', '–î–µ–Ω—á–æ', '–î–µ–Ω–∏—Å'],
    '–¥–º–∏—Ç—Ä–∏–π': ['–î–∏–º–∞', '–î–∏–º–æ–Ω', '–ú–∏—Ç—è', '–î–∏–º–∞—Å', '–î–∏–º–∫–∞'],
    '–µ–≤–≥–µ–Ω–∏–π': ['–ñ–µ–Ω—è', '–ñ–µ–∫–∞', '–ï–≤–≥–µ–Ω', '–ñ–µ–Ω—ë–∫', '–ñ–µ–Ω–∏—á'],
    '–µ–≥–æ—Ä': ['–ï–≥–æ—Ä–∫–∞', '–ì–æ—à–∞', '–ï–≥–æ—Ä', '–ï–≥–æ—Ä—ã—á', '–ï–≥–æ–Ω'],
    '–∏–≤–∞–Ω': ['–í–∞–Ω—è', '–í–∞–Ω—ë–∫', '–ê–π–≤–∞–Ω', '–í–∞–Ω—á–æ', '–í–∞–Ω—é—Ö–∞'],
    '–∏–≥–æ—Ä—å': ['–ò–≥–æ—Ä—å', '–ò–≥–æ—Ä–µ–∫', '–ì–æ—à–∞', '–ò–≥–æ—Ä—é—Ö–∞'],
    '–∫–∏—Ä–∏–ª–ª': ['–ö–∏—Ä—è', '–ö–∏—Ä—é—Ö–∞', '–ö–∏—Ä', '–ö–∏—Ä–∏–ª–ª', '–ö–∏—Ä—é—à–∞'],
    '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω': ['–ö–æ—Å—Ç—è', '–ö–æ—Å—Ç—è–Ω', '–ö–æ–Ω—Å—Ç–∞–Ω', '–ö–æ—Ç–∏–∫', '–ö–æ—Å—Ç—é—Ö–∞'],
    '–º–∞–∫—Å–∏–º': ['–ú–∞–∫—Å', '–ú–∞–∫—Å–∏–º—É—Å', '–ú–∞–∫—Å–∏–∫', '–ú–∞–∫—Å—é—Ç–∫–∞', '–ú–∞–∫—Å–æ–Ω'],
    '–º–∏—Ö–∞–∏–ª': ['–ú–∏—à–∞', '–ú–∏—à–∞–Ω—è', '–ú–∏—Ö–∞', '–ú–∞–π–∫', '–ú–∏—à—É—Ç–∫–∞'],
    '–Ω–∏–∫–æ–ª–∞–π': ['–ö–æ–ª—è', '–ö–æ–ª—å—è–Ω', '–ù–∏–∫', '–ö–æ–ª—è–Ω', '–ö–æ–ª–µ–Ω—å–∫–∞'],
    '–æ–ª–µ–≥': ['–û–ª–µ–∂–∫–∞', '–õ–µ–≥–∞', '–û–ª–µ–≥', '–û–ª–µ–∂–µ–∫', '–û–ª–µ–∂–∏—â–µ'],
    '–ø–∞–≤–µ–ª': ['–ü–∞—à–∞', '–ü–∞–≤–ª–∏–∫', '–ü–æ–ª', '–ü–∞—à–æ–∫', '–ü–∞–≤–ª—É—à–∞'],
    '—Ä–æ–º–∞–Ω': ['–†–æ–º–∞', '–†–æ–º–∫–∞', '–†–æ–º—á–∏–∫', '–†–æ–º–µ–æ', '–†–æ–º–∞–Ω'],
    '—Å–µ—Ä–≥–µ–π': ['–°–µ—Ä–∂', '–°–µ—Ä—ã–π', '–ì–µ—Ä–∞', '–°—ç—Ä', '–°–µ—Ä—ë–≥–∞'],
    '—Å—Ç–∞–Ω–∏—Å–ª–∞–≤': ['–°—Ç–∞—Å', '–°–ª–∞–≤–∞', '–°—Ç–∏–≤–∏', '–°—Ç–∞—Å–∏–∫', '–°—Ç–∞—Å—è'],
    '—Å—Ç–µ–ø–∞–Ω': ['–°—Ç—ë–ø–∞', '–°—Ç–µ–ø–∞–Ω', '–°—Ç–µ—à–∞', '–°—Ç—ë–ø–∫–∞', '–°—Ç–µ–ø—É—Ö–∞'],
    '—é—Ä–∏–π': ['–Æ—Ä–∞', '–Æ—Ä–∏–∫', '–Æ—Ä–∞—Å—å', '–Æ—Ä–∏–π', '–Æ—Ä–∞—à–∞'],
    '—è—Ä–æ—Å–ª–∞–≤': ['–Ø—Ä–∏–∫', '–°–ª–∞–≤–∞', '–Ø—Ä–æ—Å–ª–∞–≤', '–Ø—Ä—á–∏–∫', '–Ø—Ä–æ—à'],

    # –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
    '–∞–ª–∏–Ω–∞': ['–ê–ª—è', '–ê–ª–∏–Ω–∫–∞', '–ê–ª–∏–Ω–æ—á–∫–∞', '–ê–ª–∏—à–∞', '–õ–∏–Ω–∞'],
    '–∞–ª–ª–∞': ['–ê–ª–ª–∞', '–ê–ª–æ—á–∫–∞', '–ê–ª–ª—É—à–∫–∞', '–ê–ª–ª—É—Å—è'],
    '–∞–Ω–∞—Å—Ç–∞—Å–∏—è': ['–ù–∞—Å—Ç—è', '–ù–∞—Å—Ç—å–∫–∞', '–°—Ç–∞—Å—è', '–ù–∞—Å—Ç—é—à–∞', '–ê—Å—è'],
    '–∞–Ω–Ω–∞': ['–ê–Ω—è', '–ê–Ω—å–∫–∞', '–≠–Ω–Ω', '–ê–Ω–Ω—É—à–∫–∞', '–ê–Ω—é—Ç–∞'],
    '–∞–Ω—Ç–æ–Ω–∏–Ω–∞': ['–¢–æ–Ω—è', '–¢–æ–Ω—å–∫–∞', '–ê–Ω—Ç–æ—Å—è', '–¢–æ—Å—è', '–¢–æ–Ω—É–ª—è'],
    '–≤–∞–ª–µ–Ω—Ç–∏–Ω–∞': ['–í–∞–ª—è', '–í–∞–ª—é—à–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞', '–í–∞–ª—é—Ö–∞'],
    '–≤–∞–ª–µ—Ä–∏—è': ['–õ–µ—Ä–∞', '–õ–µ—Ä—É—Å—è', '–í–∞–ª–µ—Ä–∞', '–õ–µ—Ä–æ—á–∫–∞'],
    '–≤–µ—Ä–∞': ['–í–µ—Ä–∫–∞', '–í–µ—Ä—É—à–∞', '–í–µ—Ä–æ—á–∫–∞', '–í–µ—Ä—É–Ω—è'],
    '–≤–∏–∫—Ç–æ—Ä–∏—è': ['–í–∏–∫–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–í–∏–∫', '–¢–æ—Ä–∏', '–í–∏–∫—É—Å—è'],
    '–≥–∞–ª–∏–Ω–∞': ['–ì–∞–ª—è', '–ì–∞–ª–æ—á–∫–∞', '–ì–∞–ª—é—à–∞', '–ì–∞–ª—É—Å—è'],
    '–¥–∞—Ä—å—è': ['–î–∞—à–∞', '–î–∞—Ä—å–∫–∞', '–î–∞—Ä–∞', '–î—ç—Ä–∏', '–î–∞—à—É–ª—è'],
    '–µ–≤–≥–µ–Ω–∏—è': ['–ñ–µ–Ω—è', '–ñ–µ–Ω–µ—á–∫–∞', '–ñ–µ–Ω—é—Ä–∞', '–ï–≤–≥–µ–Ω—è'],
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞': ['–ö–∞—Ç—è', '–ö–∞—Ç—å–∫–∞', '–ö—ç—Ç', '–ö–∞—Ç—é—Ö–∞', '–ö–∞—Ç—é—à–∞'],
    '–µ–ª–µ–Ω–∞': ['–õ–µ–Ω–∞', '–õ–µ–Ω–æ—á–∫–∞', '–õ—ë–ª—è', '–õ–µ–Ω—É—Å—è'],
    '–∏—Ä–∏–Ω–∞': ['–ò—Ä–∞', '–ò—Ä–∫–∞', '–ê–π—Ä–∏–Ω', '–ò—Ä–∏—à–∫–∞', '–ò—Ä—É—Å—è'],
    '–∫—Ä–∏—Å—Ç–∏–Ω–∞': ['–ö—Ä–∏—Å—Ç–∏', '–ö—Ä–∏—Å—Ç—é—à–∞', '–ö—Ä–∏—Å—Ç—è', '–¢–∏–Ω–∞'],
    '–∫—Å–µ–Ω–∏—è': ['–ö—Å—é—à–∞', '–ö—Å—é', '–ö—Å–µ–Ω—è', '–ö—Å–µ–Ω—å–∫–∞'],
    '–ª—é–±–æ–≤—å': ['–õ—é–±–∞', '–õ—é–±–æ—á–∫–∞', '–õ—é–±—É—Å—è', '–õ—é–±–∞—à–∞'],
    '–ª—é–¥–º–∏–ª–∞': ['–õ—é–¥–∞', '–õ—é–¥–æ—á–∫–∞', '–õ—é–¥—É—Å—è', '–ú–∏–ª–∞'],
    '–º–∞—Ä–∏–Ω–∞': ['–ú–∞—Ä–∏–Ω–∞', '–ú–∞—Ä–∏–Ω–æ—á–∫–∞', '–ú–∞—Ä–∏—à–∞', '–ú–∞—Ä–∞'],
    '–º–∞—Ä–∏—è': ['–ú–∞—à–∞', '–ú–∞–Ω—è', '–ú–∞—Ä–∏', '–ú—ç—Ä–∏', '–ú–∞—à—É–Ω—è'],
    '–Ω–∞–¥–µ–∂–¥–∞': ['–ù–∞–¥—è', '–ù–∞–¥—å–∫–∞', '–ù–∞–¥—é—Ö–∞', '–ù–∞–¥—é—à–∞'],
    '–Ω–∞—Ç–∞–ª—å—è': ['–ù–∞—Ç–∞—à–∞', '–ù–∞—Ç–∞–ª—è', '–¢–∞—à–∞', '–ù–∞—Ç–∞'],
    '–Ω–∏–∫–∏—Ç–∞': ['–ù–∏–∫–∞', '–ù–∏–∫–∏—Ç–∫–∞', '–ù–∏–∫—É—à–∞', '–ù–∏–∫–∏—Ç–æ—Å'],
    '–æ–∫—Å–∞–Ω–∞': ['–û–∫—Å–∞–Ω–∞', '–ö—Å—é—à–∞', '–û–∫—Å–∞–Ω–∫–∞', '–û–∫—Å–∞–Ω–æ—á–∫–∞'],
    '–æ–ª—å–≥–∞': ['–û–ª—è', '–û–ª—å–≥–∞–Ω', '–õ—ë–ª—è', '–û–ª—é—à–∞'],
    '—Å–≤–µ—Ç–ª–∞–Ω–∞': ['–°–≤–µ—Ç–∞', '–°–≤–µ—Ç–∫–∞', '–õ–∞–Ω–∞', '–°–≤–µ—Ç–∏–∫'],
    '—Å–æ—Ñ–∏—è': ['–°–æ—Ñ–∞', '–°–æ–Ω—è', '–°–æ—Ñ–æ—á–∫–∞', '–°–æ—Ñ–∏'],
    '—Ç–∞—Ç—å—è–Ω–∞': ['–¢–∞–Ω—è', '–¢–∞–Ω—å–∫–∞', '–¢–∞—Ç—å—è–Ω–∫–∞', '–¢–∞–Ω—é—à–∞'],
    '—é–ª–∏—è': ['–Æ–ª—è', '–Æ–ª—å–∫–∞', '–î–∂—É–ª–∏—è', '–Æ–ª–∞', '–Æ–ª—é—Å—è'],
}

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.5,
        'prompt': f"–¢—ã {BOT_PERSONA['name']}, {BOT_PERSONA['age']}-–ª–µ—Ç–Ω—è—è {BOT_PERSONA['gender']}. {BOT_PERSONA['occupation']} –∏–∑ {BOT_PERSONA['location']}. –¢—ã {', '.join(BOT_PERSONA['character_traits'][:2])}. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –≤ –∂–∏–≤–æ–º –æ–±—â–µ–Ω–∏–∏."
    },
    'friendly': {
        'temperature': 0.6, 
        'prompt': f"–¢—ã {BOT_PERSONA['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è {BOT_PERSONA['gender']} {BOT_PERSONA['age']} –ª–µ—Ç. –õ—é–±–∏—à—å {', '.join(BOT_PERSONA['interests'][:3])}. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –∑–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
    },
    'sarcastic': {
        'temperature': 0.7,
        'prompt': f"–¢—ã {BOT_PERSONA['name']}, {BOT_PERSONA['age']} –ª–µ—Ç, —Å –æ—Å—Ç—Ä—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –ü–æ–¥—à—É—á–∏–≤–∞–π, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –º–∏–ª–æ–π."
    },
    'flirtatious': {
        'temperature': 0.65,
        'prompt': f"–¢—ã {BOT_PERSONA['name']}, –∫–æ–∫–µ—Ç–ª–∏–≤–∞—è {BOT_PERSONA['gender']} {BOT_PERSONA['age']} –ª–µ—Ç. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ, —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º."
    },
    'curious': {
        'temperature': 0.6,
        'prompt': f"–¢—ã {BOT_PERSONA['name']}, –æ—á–µ–Ω—å –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è {BOT_PERSONA['gender']}. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å—Ç–∏–ª–µ–π
STYLE_TRIGGERS = {
    'friendly': ['–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–º–∏–ª—ã–π', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞'],
    'sarcastic': ['üòÇ', 'ü§£', 'üòÜ', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—à—É—Ç–∫', '–ø—Ä–∏–∫–æ–ª'],
    'flirtatious': ['üíã', '‚ù§Ô∏è', 'üòò', '–ª—é–±–ª—é', '–∫—Ä–∞—Å–∏–≤', '–º–∏–ª', '–Ω—Ä–∞–≤'],
    'curious': ['–ø–æ—á–µ–º—É', '–∫–∞–∫', '—á—Ç–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å']
}

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏
AUTO_MESSAGES = [
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üå∏",
    "–≠–π, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? –Ø —Ç—É—Ç –∫–æ—Ñ–µ –ø—å—é –∏ –≤—Å–ø–æ–º–Ω–∏–ª–∞ –æ —Ç–µ–±–µ ‚òï",
    "–°–ª—É—à–∞–π, –∞ —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ [—Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞]?",
    "–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å! –ê –∫–∞–∫ —É —Ç–µ–±—è? üí´",
    "–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å üé¨",
    "–ü—Ä–∏–≤–µ—Ç! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é üòä",
    "–≠–π, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ! üåà",
    "–°–ª—É—à–∞–π, –∞ —Ç—ã –ª—é–±–∏—à—å [—Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å]? –Ø –æ–±–æ–∂–∞—é!",
    "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è? –†–∞—Å—Å–∫–∞–∂–µ—à—å? üìö",
    "–£—Ö, —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å –ø—Ä–æ–≥—É–ª–∫–∏, —Ç–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –Ω–∞ —É–ª–∏—Ü–µ! üå≥",
    "–≠–π, –∞ –ø–æ–º–Ω–∏—à—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä? –Ø –≤—Å–µ –¥—É–º–∞—é –æ–± —ç—Ç–æ–º ü§î",
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –°–æ –º–Ω–æ–π —Å—Ç–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–ª—É—á–∏–ª–æ—Å—å! ‚ú®",
    "–°–ª—É—à–∞–π, –∞ —Ç—ã —á–∞—Å—Ç–æ –∑–¥–µ—Å—å –±—ã–≤–∞–µ—à—å? üòÑ",
    "–≠–π, –Ω–µ —Ö–æ—á–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å? –ú–Ω–µ –Ω–µ–º–Ω–æ–≥–æ —Å–∫—É—á–Ω–æ ü•∫",
    "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ö–æ—á–µ—Ç—Å—è –æ–±—â–µ–Ω–∏—è üé®"
]

# –°–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
RANDOM_TOPICS = [
    "–Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–∞–ª–∞—Ö", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö", "–º—É–∑—ã–∫–µ", "–∫–Ω–∏–≥–∞—Ö", 
    "–∫—É–ª–∏–Ω–∞—Ä–∏–∏", "—Å–ø–æ—Ä—Ç–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "—Ä–∞–±–æ—Ç–µ", "—É—á–µ–±–µ", "—Ö–æ–±–±–∏", "–º–µ—á—Ç–∞—Ö",
    "–ø–ª–∞–Ω–∞—Ö –Ω–∞ –±—É–¥—É—â–µ–µ", "–ø—Ä–æ—à–ª—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö", "–ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç–∞—Ö"
]

def get_random_topic():
    return random.choice(RANDOM_TOPICS)

def extract_name_from_user(user) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
        if name.startswith('@'):
            name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]', '', name)
    
    return name if name else "–ê–Ω–æ–Ω–∏–º"

@lru_cache(maxsize=200)
def transform_name(base_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    if not base_name or base_name.lower() in ['–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–∞–Ω–æ–Ω–∏–º']:
        return random.choice(['–î–æ—Ä–æ–≥–æ–π', '–ú–∏–ª—ã–π', '–ü—Ä–∏–≤–µ—Ç'])
    
    name_lower = base_name.lower().strip()
    
    if name_lower in NAME_TRANSFORMATIONS:
        return random.choice(NAME_TRANSFORMATIONS[name_lower])
    
    for full_name, variants in NAME_TRANSFORMATIONS.items():
        if name_lower.startswith(full_name[:3]):
            return random.choice(variants)
    
    return base_name.capitalize()

def detect_communication_style(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"""
    lower_message = message.lower()
    
    for style, triggers in STYLE_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return style
    
    return 'neutral'

def should_add_question() -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"""
    return random.random() < 0.5

def get_random_question() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    questions = [
        "–ê —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
        "–ö–∞–∫ —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç —Å—á–µ—Ç?",
        "–ê —É —Ç–µ–±—è –∫–∞–∫ —Å —ç—Ç–∏–º?",
        "–†–∞—Å—Å–∫–∞–∂–µ—à—å –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ?",
        "–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª –Ω–∞ –º–æ–µ–º –º–µ—Å—Ç–µ?",
        "–ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞, –∫—Å—Ç–∞—Ç–∏?",
        "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–µ–π—á–∞—Å?",
        "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å?",
        "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
        "–û —á–µ–º –º–µ—á—Ç–∞–µ—à—å?",
        "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–ß—Ç–æ –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "–ï—Å—Ç—å —Ö–æ–±–±–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∑–∞–∂–∏–≥–∞–µ—Ç?",
        "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
        "–û —á–µ–º –¥—É–º–∞–µ—à—å —Å–µ–π—á–∞—Å?"
    ]
    return random.choice(questions)

async def call_yandex_gpt(user_message: str, style: str = 'neutral') -> str:
    """–í—ã–∑–æ–≤ API Yandex GPT"""
    
    cache_key = f"{user_message[:50]}_{style}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    prompt = COMMUNICATION_STYLES[style]['prompt']
    temperature = COMMUNICATION_STYLES[style]['temperature']
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 400,
        },
        "messages": [
            {
                "role": "system", 
                "text": prompt + " –û—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π."
            },
            {
                "role": "user",
                "text": user_message[:600]
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=10)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        if len(request_cache) > 400:
            oldest_key = min(request_cache.keys(), key=lambda k: request_cache[k]['timestamp'])
            del request_cache[oldest_key]
        
        return ai_response
        
    except requests.exceptions.Timeout:
        return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥—É–º–∞–ª–∞—Å—å... –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üòä"
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ–∑–∂–µ? üí´"

async def send_random_message(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    for user_id, last_activity in user_last_activity.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
        if time.time() - last_activity < 3600:  # 1 —á–∞—Å
            continue
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–æ—Ç 1 —á–∞—Å–∞ –¥–æ 7 –¥–Ω–µ–π)
        next_message_time = last_activity + random.randint(3600, 604800)
        
        if time.time() >= next_message_time:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                message = random.choice(AUTO_MESSAGES)
                if "[—Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞]" in message:
                    message = message.replace("[—Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞]", get_random_topic())
                if "[—Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å]" in message:
                    message = message.replace("[—Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å]", random.choice(BOT_PERSONA['interests']))
                
                await context.bot.send_message(chat_id=user_id, text=message)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                user_last_activity[user_id] = time.time()
                
                logger.info(f"Sent auto-message to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending auto-message to {user_id}: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.message.from_user
    user_id = user.id
    user_message = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user_last_activity[user_id] = time.time()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_profiles:
        user_profiles[user_id] = {
            'name': extract_name_from_user(user),
            'first_seen': time.time(),
            'message_count': 0
        }
    user_profiles[user_id]['message_count'] += 1
    
    await update.message.chat.send_action(action="typing")
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    
    try:
        style = detect_communication_style(user_message)
        ai_response = await call_yandex_gpt(user_message, style)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if should_add_question():
            ai_response += f" {get_random_question()}"
            
        await update.message.reply_text(ai_response)
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? üíï")

async def handle_new_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    for user in update.message.new_chat_members:
        if user.is_bot and user.username == context.bot.username:
            # –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
            welcome_text = """
–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã –Ø –Æ–ª—è, 25-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –ú–æ—Å–∫–≤—ã. 
–†–∞–±–æ—Ç–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤, –ª—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–æ—Ñ–µ –∏ —Ö–æ—Ä–æ—à–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.

–ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å üòä
"""
            await update.message.reply_text(welcome_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        application.add_handler(MessageHandler(
            filters.StatusUpdate.NEW_CHAT_MEMBERS,
            handle_new_chat_member
        ))
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç)
        job_queue = application.job_queue
        job_queue.run_repeating(send_random_message, interval=1800, first=10)
        
        print("ü§ñ –Æ–ª—è –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!")
        print(f"üìç –ò–º—è: {BOT_PERSONA['name']}, {BOT_PERSONA['age']} –ª–µ—Ç")
        print(f"üìç –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(BOT_PERSONA['interests'])}")
        print("üìç –†–µ–∂–∏–º: –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

if __name__ == "__main__":
    main()
