import os
import logging
import requests
import json
import asyncio
import time
import re
import random
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")  # –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã

# URL API
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
OPENWEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"
YANDEX_NEWS_URL = "https://newsapi.org/v2/top-headlines"  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NewsAPI

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ - –¥–µ–≤—É—à–∫–∞ –Æ–ª—è 25 –ª–µ—Ç
BOT_PROFILE = {
    'name': '–Æ–ª—è',
    'age': 25,
    'gender': '–¥–µ–≤—É—à–∫–∞',
    'personality': '—É–º–Ω–∞—è, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –∏–Ω–æ–≥–¥–∞ —Ä–µ–∑–∫–∞—è',
    'interests': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º—É–∑—ã–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫—É–ª–∏–Ω–∞—Ä–∏—è'
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
NAME_TRANSFORMATIONS = {
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–º–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
}

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –Æ–ª–∏
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.5,
        'prompt': f"–¢—ã {BOT_PROFILE['name']}, {BOT_PROFILE['age']}-–ª–µ—Ç–Ω—è—è {BOT_PROFILE['gender']}. {BOT_PROFILE['personality']}. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫."
    },
    'friendly': {
        'temperature': 0.6, 
        'prompt': f"–¢—ã {BOT_PROFILE['name']}, –º–∏–ª–∞—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è {BOT_PROFILE['gender']}. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ."
    },
    'sarcastic': {
        'temperature': 0.8,
        'prompt': f"–¢—ã {BOT_PROFILE['name']}, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è {BOT_PROFILE['gender']} —Å –æ—Å—Ç—Ä—ã–º —è–∑—ã–∫–æ–º. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π –∏ —é–º–æ—Ä–æ–º."
    },
    'aggressive': {
        'temperature': 0.9,
        'prompt': f"–¢—ã {BOT_PROFILE['name']}, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–∞—è {BOT_PROFILE['gender']}. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ."
    },
    'flirtatious': {
        'temperature': 0.7,
        'prompt': f"–¢—ã {BOT_PROFILE['name']}, –∫–æ–∫–µ—Ç–ª–∏–≤–∞—è {BOT_PROFILE['gender']}. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å —Ñ–ª–∏—Ä—Ç–æ–º."
    },
    'technical': {
        'temperature': 0.4,
        'prompt': f"–¢—ã {BOT_PROFILE['name']}, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–æ–≤–∞–Ω–Ω–∞—è {BOT_PROFILE['gender']}. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
FUNCTION_TRIGGERS = {
    'weather': ['–ø–æ–≥–æ–¥', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', '–≥—Ä–∞–¥—É—Å', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '—Å–æ–ª–Ω', 'weather', 'temp'],
    'traffic': ['–ø—Ä–æ–±–∫', '—Ç—Ä–∞—Ñ–∏–∫', '–¥–æ—Ä–æ–≥', '–ø—Ä–æ–±–æ—á', 'traffic', 'jam'],
    'news': ['–Ω–æ–≤–æ—Å—Ç', 'news', '—Å–≤–µ–∂–∏–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤']
}

async def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
    try:
        params = {
            'q': city,
            'appid': OPENWEATHER_API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        
        response = await asyncio.get_event_loop().run_in_executor(
            None, lambda: requests.get(OPENWEATHER_URL, params=params, timeout=5)
        )
        
        if response.status_code == 200:
            data = response.json()
            weather = {
                'city': data['name'],
                'temp': data['main']['temp'],
                'feels_like': data['main']['feels_like'],
                'description': data['weather'][0]['description'],
                'humidity': data['main']['humidity'],
                'wind': data['wind']['speed']
            }
            
            return (f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
                   f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
                   f"‚Ä¢ {weather['description'].capitalize()}\n"
                   f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                   f"‚Ä¢ –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å")
        
        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ üòï"
        
    except Exception as e:
        logger.error(f"Weather API error: {e}")
        return "–û–π, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å–µ–π—á–∞—Å üåßÔ∏è"

async def get_news() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º NewsAPI (–Ω—É–∂–µ–Ω API –∫–ª—é—á) –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
        return ("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n"
               "‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: –ò–ò —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ\n"
               "‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞: –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ\n"
               "‚Ä¢ –°–ø–æ—Ä—Ç: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç—á–∏\n"
               "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏–∫–∞: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã\n\n"
               "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã üì∫")
        
    except Exception as e:
        logger.error(f"News error: {e}")
        return "–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–æ—Å—Ç—è–º üì°"

async def get_traffic(city: str = "–ú–æ—Å–∫–≤–∞") -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–∫–∞—Ö"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–±–æ–∫ (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Yandex Traffic API)
        traffic_levels = ["—Å–≤–æ–±–æ–¥–Ω–æ", "–Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–∫–∏", "–ø—Ä–æ–±–∫–∏", "—Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–∫–∏", "–∂—É—Ç–∫–∏–µ –ø—Ä–æ–±–∫–∏"]
        traffic = random.choice(traffic_levels)
        
        return f"üöó –ü—Ä–æ–±–∫–∏ –≤ {city}: {traffic}. –í—ã–µ–∑–∂–∞–π—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ! üö¶"
        
    except Exception as e:
        logger.error(f"Traffic error: {e}")
        return "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–∫–∞—Ö —Å–µ–π—á–∞—Å üöß"

def extract_city_from_message(message: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    cities = ['–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–∫–∞–∑–∞–Ω—å', 
              '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '—á–µ–ª—è–±–∏–Ω—Å–∫', '—Å–∞–º–∞—Ä–∞', '–æ–º—Å–∫', '—Ä–æ—Å—Ç–æ–≤', '—É—Ñ–∞', 
              '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ø–µ—Ä–º—å', '–≤–æ–ª–≥–æ–≥—Ä–∞–¥', '–≤–æ—Ä–æ–Ω–µ–∂']
    
    message_lower = message.lower()
    for city in cities:
        if city in message_lower:
            return city.capitalize()
    
    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ª—é–±–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    words = re.findall(r'\b[–ê-–Ø][–∞-—è]+\b', message)
    return words[0] if words else "–ú–æ—Å–∫–≤–∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞

def extract_name_from_user(user) -> str:
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
        if name.startswith('@'):
            name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]', '', name)
    
    return name if name else "–ê–Ω–æ–Ω–∏–º"

@lru_cache(maxsize=200)
def transform_name(base_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã"""
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è)

def detect_communication_style(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è)

def detect_function_request(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
    lower_message = message.lower()
    
    for func, triggers in FUNCTION_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return func
    
    return None

@lru_cache(maxsize=100)
def generate_prompt_template(style: str = 'neutral') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    return COMMUNICATION_STYLES[style]['prompt']

async def call_yandex_gpt_optimized(user_message: str, style: str = 'neutral') -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è"""
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_message = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    requested_function = detect_function_request(user_message)
    
    if requested_function:
        await update.message.chat.send_action(action="typing")
        
        try:
            if requested_function == 'weather':
                city = extract_city_from_message(user_message)
                weather_info = await get_weather(city)
                await update.message.reply_text(weather_info)
                
            elif requested_function == 'traffic':
                city = extract_city_from_message(user_message)
                traffic_info = await get_traffic(city)
                await update.message.reply_text(traffic_info)
                
            elif requested_function == 'news':
                news_info = await get_news()
                await update.message.reply_text(news_info)
                
            return
            
        except Exception as e:
            logger.error(f"Function error: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    base_name = extract_name_from_user(user)
    transformed_name = transform_name(base_name)
    style = detect_communication_style(user_message)
    
    await update.message.chat.send_action(action="typing")
    
    try:
        ai_response = await call_yandex_gpt_optimized(user_message, style)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –æ—Ç–≤–µ—Ç
        final_response = f"{transformed_name}, {ai_response}"
        await update.message.reply_text(final_response)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –Ø –Æ–ª—è, –∫—Å—Ç–∞—Ç–∏ üòâ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø {BOT_PROFILE['name']}, {BOT_PROFILE['age']}-–ª–µ—Ç–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ (–Ω–∞–ø–∏—à–∏ '–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ')
‚Ä¢ –°–æ–æ–±—â–∞—Ç—å –æ –ø—Ä–æ–±–∫–∞—Ö ('–ø—Ä–æ–±–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ')
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ('–Ω–æ–≤–æ—Å—Ç–∏')

üí¨ –ú–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: {BOT_PROFILE['personality']}
üé≠ –ú–æ–≥—É –±—ã—Ç—å: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–π, —Å—Ç—Ä–æ–≥–æ–π –∏–ª–∏ –∏–≥—Ä–∏–≤–æ–π

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üíï
"""
    await update.message.reply_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^/help$'),
            help_command
        ))
        
        print(f"ü§ñ {BOT_PROFILE['name']} –∑–∞–ø—É—â–µ–Ω–∞!")
        print(f"üìç –í–æ–∑—Ä–∞—Å—Ç: {BOT_PROFILE['age']} –ª–µ—Ç")
        print(f"üìç –•–∞—Ä–∞–∫—Ç–µ—Ä: {BOT_PROFILE['personality']}")
        print("üìç –§—É–Ω–∫—Ü–∏–∏: –ø–æ–≥–æ–¥–∞, –ø—Ä–æ–±–∫–∏, –Ω–æ–≤–æ—Å—Ç–∏")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

if __name__ == "__main__":
    main()
