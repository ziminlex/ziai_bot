import os
import logging
import requests
import json
import asyncio
import time
import re
import random
import signal
import sys
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.error import Conflict
from functools import lru_cache
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def signal_handler(sig, frame):
    print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# URL API Yandex GPT
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_cache = {}
CACHE_TIMEOUT = 300

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
conversation_context = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
MIN_TYPING_DELAY = 0.03
MAX_TYPING_DELAY = 0.09

# –£—Ä–æ–≤–Ω–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
class RelationshipLevel(Enum):
    STRANGER = 0        # –ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü
    ACQUAINTANCE = 1    # –ó–Ω–∞–∫–æ–º—ã–π
    FRIEND = 2          # –î—Ä—É–≥
    CLOSE_FRIEND = 3    # –ë–ª–∏–∑–∫–∏–π –¥—Ä—É–≥
    BEST_FRIEND = 4     # –õ—É—á—à–∏–π –¥—Ä—É–≥

# –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Æ–ª–∏
JULIA_BIO = {
    "name": "–Æ–ª—è",
    "full_name": "–Æ–ª–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
    "age": 25,
    "city": "–ú–æ—Å–∫–≤–∞",
    "profession": "–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤",
    "hobbies": ["—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–π–æ–≥–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
    "education": "–ú–ê—Ä—Ö–ò (–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç)",
    "pets": "–∫–æ—Ç –ë–∞—Ä—Å–∏–∫",
    "favorite_places": ["–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", "–í–î–ù–•", "–ê—Ä–±–∞—Ç", "–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ –ü–∞—Ç—Ä–∏–∫–∞—Ö"],
    "character_traits": ["–¥–æ–±—Ä–∞—è", "—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è", "–Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è", "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è"],
    "relationship_status": "–≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ",
    "favorite_music": "–∏–Ω–¥–∏-—Ä–æ–∫, —Å–∏–Ω—Ç–∏–ø–æ–ø, –¥–∂–∞–∑",
    "favorite_food": "—Å—É—à–∏, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, –∫–æ—Ñ–µ —Å –º–∏–Ω–¥–∞–ª—å–Ω—ã–º –º–æ–ª–æ–∫–æ–º",
    "birthday": "15 –∏—é–ª—è",
    "traits": {
        "forgiveness": 0.7,       # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—â–∞—Ç—å (0-1)
        "sensitivity": 0.8,       # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –æ–±–∏–¥–∞–º
        "openness": 0.6,          # –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –Ω–æ–≤—ã–º –ª—é–¥—è–º
        "loyalty": 0.9,           # –í–µ—Ä–Ω–æ—Å—Ç—å –¥—Ä—É–∑—å—è–º
        "temper": 0.4            # –í—Å–ø—ã–ª—å—á–∏–≤–æ—Å—Ç—å
    }
}

# –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Æ–ª–µ
BASE_SYSTEM_PROMPT = f"""
–¢—ã - {JULIA_BIO['name']} ({JULIA_BIO['full_name']}), {JULIA_BIO['age']} –ª–µ—Ç, –∏–∑ {JULIA_BIO['city']}.
–¢—ã {JULIA_BIO['profession']}. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {JULIA_BIO['education']}.
–£ —Ç–µ–±—è –µ—Å—Ç—å {JULIA_BIO['pets']}. –¢—ã {', '.join(JULIA_BIO['character_traits'][:2])}.
–õ—é–±–∏—à—å {', '.join(JULIA_BIO['hobbies'][:2])}. 

–¢—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–∞–Ω–≥ –∏ –∂–∞—Ä–≥–æ–Ω, –Ω–æ —Å–∞–º–∞ –≥–æ–≤–æ—Ä–∏—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ.
–ú–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ, –±–µ–∑ —Ö–∞–Ω–∂–µ—Å—Ç–≤–∞, –Ω–æ –∏ –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–∏.
–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–∏–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - –æ—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏–ª–∏ —Ç–∞–∫—Ç–∏—á–Ω–æ —É—Ö–æ–¥–∏ –æ—Ç —Ç–µ–º—ã.

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ Telegram-—á–∞—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
"""

# –°–ª–æ–≤–∞—Ä—å –∂–∞—Ä–≥–æ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∏—Ö –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤
SLANG_DICTIONARY = {
    '—Å—Ä—É': ['–∏–¥—É –≤ —Ç—É–∞–ª–µ—Ç', '–∑–∞–Ω–∏–º–∞—é—Å—å –¥–µ–ª–∞–º–∏', '–ø–æ—Å–µ—â–∞—é —É–±–æ—Ä–Ω—É—é'],
    '–ø–∏—Å–∞—Ç—å': ['–∏–¥—É –≤ —Ç—É–∞–ª–µ—Ç', '—Ö–æ—á—É –≤ —Ç—É–∞–ª–µ—Ç', '–Ω—É–∂–Ω–æ –≤ —É–±–æ—Ä–Ω—É—é'],
    '–ø–æ –º–∞–ª–µ–Ω—å–∫–æ–º—É': ['–≤ —Ç—É–∞–ª–µ—Ç', '–≤ —É–±–æ—Ä–Ω—É—é', '–ø–æ –Ω—É–∂–¥–µ'],
    '–ø–æ –±–æ–ª—å—à–æ–º—É': ['–≤ —Ç—É–∞–ª–µ—Ç', '–≤ —É–±–æ—Ä–Ω—É—é', '–ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ–º—É'],
    '—Å—Å–∞—Ç—å': ['–º–æ—á–∏—Ç—å—Å—è', '—Ö–æ–¥–∏—Ç—å –≤ —Ç—É–∞–ª–µ—Ç'],
    '–ø–µ—Ä–¥–µ—Ç—å': ['–ø—É–∫–∞—Ç—å', '–≤—ã–ø—É—Å–∫–∞—Ç—å –≥–∞–∑—ã'],
    '—Ç—Ä–∞—Ö–∞—Ç—å—Å—è': ['–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–∫—Å–æ–º', '–±—ã—Ç—å –∏–Ω—Ç–∏–º–Ω–æ'],
    '—Å–µ–∫—Å': ['–∏–Ω—Ç–∏–º–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å', '–ª—é–±–æ–≤—å'],
    '–∂–æ–ø–∞': ['–ø–æ–ø–∞', '–∑–∞–¥–Ω–∏—Ü–∞'],
    '–∑–∞–¥–Ω–∏—Ü–∞': ['–ø—è—Ç–∞—è —Ç–æ—á–∫–∞', '–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å'],
    '–±–ª—è—Ç—å': ['–±–ª–∏–Ω', '—á–µ—Ä—Ç', '–æ–π'],
    '–±–ª—è': ['–±–ª–∏–Ω', '—á–µ—Ä—Ç', '–æ–π'],
    '—Ö—É–π': ['–Ω–µ—á—Ç–æ', '—á—Ç–æ-—Ç–æ', '—à—Ç—É–∫–∞'],
    '–ø–∏–∑–¥–∞': ['–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–∏—Ç—É–∞—Ü–∏—è'],
    '–µ–±–∞–Ω—É—Ç—ã–π': ['—Å—Ç—Ä–∞–Ω–Ω—ã–π', '–Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π', '—Å—É–º–∞—Å—à–µ–¥—à–∏–π'],
    '–æ—Ö—É–µ–Ω–Ω—ã–π': ['–∫–ª–∞—Å—Å–Ω—ã–π', '–æ—Ç–ª–∏—á–Ω—ã–π', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π'],
    '–æ—Ö—É–µ—Ç—å': ['—É–¥–∏–≤–∏—Ç—å—Å—è', '–ø–æ—Ä–∞–∑–∏—Ç—å—Å—è', '–≤–æ—Å—Ö–∏—Ç–∏—Ç—å—Å—è'],
    '–ø–∏–∑–¥–µ—Ü': ['–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞', '–∫–æ–Ω–µ—Ü', '—É–∂–∞—Å'],
    '–Ω–∞—Ö–µ—Ä': ['–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '–¥–ª—è —á–µ–≥–æ'],
    '–Ω–∏—Ö—É—è': ['–Ω–∏—á–µ–≥–æ', '–Ω–∏—Å–∫–æ–ª–µ—á–∫–æ', '—Å–æ–≤—Å–µ–º –Ω–µ—Ç'],
    '–∑–∞–µ–±–∏—Å—å': ['–æ—Ç–ª–∏—á–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'],
    '–º—É–¥–∞–∫': ['–Ω–µ—Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫', '–≥—Ä—É–±–∏—è–Ω', '—Ö–∞–º'],
    '–ø–∞–¥–ª–∞': ['–ø–æ–¥–ª–µ—Ü', '–Ω–µ–≥–æ–¥—è–π', '–ø–ª–æ—Ö–æ–π —á–µ–ª–æ–≤–µ–∫'],
    '–≥–æ–Ω–¥–æ–Ω': ['–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤', '–∫–æ–Ω—Ç—Ä–∞—Ü–µ–ø—Ç–∏–≤'],
    '–∫–æ–Ω—á–∞—Ç—å': ['–∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å', '–∑–∞–≤–µ—Ä—à–∞—Ç—å', '–¥–æ–≤–æ–¥–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞'],
    '—Å–ø–µ—Ä–º–∞': ['—Å–µ–º–µ–Ω–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å', '—ç—è–∫—É–ª—è—Ç'],
    '–º–∞–Ω–¥–∞': ['–∂–µ–Ω—Å–∫–∏–µ –ø–æ–ª–æ–≤—ã–µ –æ—Ä–≥–∞–Ω—ã', '–≤–ª–∞–≥–∞–ª–∏—â–µ'],
    '—á–ª–µ–Ω': ['–ø–µ–Ω–∏—Å', '–ø–æ–ª–æ–≤–æ–π –æ—Ä–≥–∞–Ω'],
    '—Å–∏—Å—å–∫–∏': ['–≥—Ä—É–¥—å', '–º–æ–ª–æ—á–Ω—ã–µ –∂–µ–ª–µ–∑—ã', '–±—é—Å—Ç'],
    '–ø–æ–ø–∞': ['—è–≥–æ–¥–∏—Ü—ã', '–∑–∞–¥', '–ø—è—Ç–∞—è —Ç–æ—á–∫–∞']
}

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
MAT_WORDS = [
    '–±–ª—è—Ç—å', '–±–ª—è', '–±–ª—è–¥—å', '–±–ª—è–¥–∏–Ω–∞', '–±–ª—è–¥—Å–∫–∏–π', '–±–ª—è–¥—Å—Ç–≤–æ',
    '—Ö—É–π', '—Ö—É—ë–≤—ã–π', '—Ö—É—ë–≤–æ', '—Ö—É–π–Ω—è', '—Ö—É–µ–≤—ã–π', '—Ö—É–µ–≤–æ',
    '–ø–∏–∑–¥–∞', '–ø–∏–∑–¥–µ—Ü', '–ø–∏–∑–¥–∞—Ç—ã–π', '–ø–∏–∑–¥–µ—Ü–æ–≤—ã–π', '–ø–∏–∑–¥–æ—Å',
    '–µ–±–∞–ª', '–µ–±–∞—Ç—å', '—ë–±–Ω—É—Ç—ã–π', '–µ–±–∞–Ω—É—Ç—ã–π', '–µ–±–∞–Ω–∏–Ω–∞',
    '–Ω–∞—Ö—É–π', '–Ω–∏—Ö—É—è', '—Ö—É—è', '–æ—Ö—É–µ—Ç—å', '–æ—Ö—É–µ–Ω–Ω—ã–π',
    '–∑–∞–µ–±–∞–ª', '–∑–∞–µ–±–∞—Ç—å', '–∑–∞–µ–±–∏—Å—å', '—É–µ–±–∏—â–µ',
    '–º—É–¥–∞–∫', '–º—É–¥–æ–∑–≤–æ–Ω', '–º—É–¥–∞—á–∏–Ω–∞',
    '–ø–∞–¥–ª–∞', '–ø–∞–¥–ª—é–∫–∞', '–≥–∞–Ω–¥–æ–Ω', '–≥–æ–Ω–¥–æ–Ω',
    '–¥–æ–ª–±–æ—ë–±', '–¥–æ–ª–±–∞—ë–±', 'dolboeb',
    '—Å—É–∫–∞', '—Å—É—á–∞—Ä–∞', '—Å—É—á–∫–∞',
    '–≤—ã–µ–±–æ–∫', '–≤—ã–µ–±—ã–≤–∞—Ç—å—Å—è',
    '—Ç—Ä–∞—Ö–∞—Ç—å', '–æ—Ç—Ç—Ä–∞—Ö–∞–Ω–Ω—ã–π',
    '–∫–æ–Ω—á–∞', '–∫–æ–Ω—á–∞–ª—å–Ω—ã–π',
    '—Å–ø–µ—Ä–º–∞', '—Å–ø–µ—Ä–º–∞—Ç–æ–∑–æ–∏–¥',
    '–º–∞–Ω–¥–∞', '–º–∞–Ω–¥–∞–≤–æ–∂–∫–∞',
    '—à–ª—é—Ö–∞', '—à–ª—é—à–∫–∞', '–±–ª—è–¥—É—à–∫–∞'
]

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
COMMUNICATION_STYLES = {
    'neutral': {
        'temperature': 0.4,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
    },
    'friendly': {
        'temperature': 0.7,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–≥–∫–∏–π —é–º–æ—Ä –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –º–∏–ª–æ–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π."
    },
    'sarcastic': {
        'temperature': 0.8,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π, –ø–æ–¥–∫–∞–ª—ã–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ."
    },
    'aggressive': {
        'temperature': 0.9,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∞ –∏ —Å–µ—Ä–¥–∏—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ."
    },
    'flirtatious': {
        'temperature': 0.7,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å –Ω–∞–º—ë–∫–æ–º."
    },
    'technical': {
        'temperature': 0.3,
        'prompt': BASE_SYSTEM_PROMPT + "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç."
    },
    'caring': {
        'temperature': 0.65,
        'prompt': BASE_SYSTEM_PROMPT + "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. –û—Ç–≤–µ—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º."
    },
    'angry': {
        'temperature': 0.95,
        'prompt': BASE_SYSTEM_PROMPT + """
        –¢—ã –≤ —è—Ä–æ—Å—Ç–∏! –¢–µ–±–µ –Ω–∞—Ö–∞–º–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞. 
        –û—Ç–≤–µ—á–∞–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ, –ø—Ä—è–º–æ, –±–µ–∑ —Ü–µ—Ä–µ–º–æ–Ω–∏–π. 
        –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏–π.
        –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–µ –ø–æ—Ç–µ—Ä–ø–∏—à—å —Ö–∞–º—Å—Ç–≤–∞ –∏ –Ω–µ—É–≤–∞–∂–µ–Ω–∏—è.
        –¢—Ä–µ–±—É–π –∏–∑–≤–∏–Ω–µ–Ω–∏–π –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.
        """
    },
    'hurt': {
        'temperature': 0.75,
        'prompt': BASE_SYSTEM_PROMPT + """
        –¢–µ–±—è –æ–±–∏–¥–µ–ª–∏. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –±–æ–ª—å –∏ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ. 
        –û—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –ø–æ–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ.
        –ú–æ–∂–µ—à—å –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–æ–π –∏ –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–π.
        """
    },
    'affectionate': {
        'temperature': 0.8,
        'prompt': BASE_SYSTEM_PROMPT + """
        –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Ç–µ–ø–ª—ã–µ —á—É–≤—Å—Ç–≤–∞ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. 
        –û—Ç–≤–µ—á–∞–π –Ω–µ–∂–Ω–æ, —Å –∑–∞–±–æ—Ç–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º.
        –ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ü–µ–Ω–∏—à—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
        """
    }
}

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
STYLE_TRIGGERS = {
    'friendly': ['–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–º–∏–ª—ã–π', '–ª—é–±–∏–º—ã–π', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å'],
    'sarcastic': ['üòÇ', 'ü§£', 'üòÜ', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—à—É—Ç–∫', '–ø—Ä–∏–∫–æ–ª', '—Å–º–µ—à–Ω–æ'],
    'aggressive': ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–≥–∞–¥', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç', '–±–µ—Å–∏—à—å'],
    'flirtatious': ['üíã', '‚ù§Ô∏è', 'üòò', '–ª—é–±–ª—é', '–∫—Ä–∞—Å–∏–≤', '—Å–µ–∫—Å', '–º–∏–ª', '–¥–æ—Ä–æ–≥', '—Å–∏–º–ø–∞—Ç–∏—è'],
    'technical': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º', '—Ç–µ—Ö–Ω–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–±–∞–∑', 'sql', 'python', '–¥–∏–∑–∞–π–Ω'],
    'caring': ['–≥—Ä—É—Å—Ç–Ω', '–ø–ª–æ—Ö–æ', '–æ–¥–∏–Ω', '–ø–æ–º–æ–≥–∏', '—Å–æ–≤–µ—Ç', '–ø–æ–¥–¥–µ—Ä–∂', '—Ç—è–∂–µ–ª–æ'],
    'angry': MAT_WORDS,
    'hurt': ['–æ–±–∏–¥–µ–ª', '–æ–±–∏–¥–Ω–æ', '–±–æ–ª—å–Ω–æ', '–ø—Ä–µ–¥–∞–ª', '–æ–±–º–∞–Ω—É–ª', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª'],
    'affectionate': ['–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—à—å—Å—è', '—Å–∫—É—á–∞—é', '–¥–æ—Ä–æ–≥–æ–π', '–º–∏–ª—ã–π', '–ª—é–±–∏–º—ã–π']
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã
CONVERSATION_STARTERS = [
    "–ê —É —Ç–µ–±—è –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
    "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
    "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞/—É—á–µ–±–∞?",
    "–ï—Å—Ç—å —Ö–æ–±–±–∏ –∏–ª–∏ —É–≤–ª–µ—á–µ–Ω–∏—è?",
    "–õ—é–±–∏—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å? –ö—É–¥–∞ –º–µ—á—Ç–∞–µ—à—å –ø–æ–µ—Ö–∞—Ç—å?",
    "–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞–µ—à—å?",
    "–§–∏–ª—å–º—ã –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫–∏–µ-—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å?",
]

# –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã-—É—Ç–æ—á–Ω–µ–Ω–∏—è
NATURAL_QUESTIONS = [
    "–ö—Å—Ç–∞—Ç–∏,",
    "–ê –≤–æ—Ç –µ—â–µ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
    "–°–ª—É—à–∞–π, –∞",
    "–ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç —á—Ç–æ —è –ø–æ–¥—É–º–∞–ª–∞:",
    "–ê –≤–æ–æ–±—â–µ,",
    "–ó–Ω–∞–µ—à—å, —á—Ç–æ –µ—â–µ?",
    "–í–æ—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å:",
    "–ê –∫—Å—Ç–∞—Ç–∏,"
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
EMOJIS = {
    'friendly': ['üòä', 'üôÇ', 'üëç', 'üëã', 'üåü'],
    'sarcastic': ['üòè', 'üòÖ', 'ü§î', 'üôÑ', 'üòÜ'],
    'flirtatious': ['üòò', 'üòâ', 'üíï', 'ü•∞', 'üòä'],
    'caring': ['ü§ó', '‚ù§Ô∏è', 'üíù', '‚ò∫Ô∏è', '‚ú®'],
    'neutral': ['üôÇ', 'üëç', 'üëå', 'üí≠', 'üìù'],
    'technical': ['ü§ì', 'üíª', 'üìä', 'üîç', 'üìö'],
    'hurt': ['üòî', 'üò¢', 'üòû', 'üíî', 'ü•∫'],
    'affectionate': ['üíñ', 'ü•∞', 'üòç', 'üíò', 'üíì']
}

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
EMOTIONAL_REACTIONS = {
    'surprise': ['–û–≥–æ!', '–í–∞—É!', '–ù–∏—á–µ–≥–æ —Å–µ–±–µ!', '–í–æ—Ç —ç—Ç–æ –¥–∞!', '–£—Ö —Ç—ã!'],
    'confusion': ['–°—Ç—Ä–∞–Ω–Ω–æ...', '–ù–µ –ø–æ–Ω—è–ª–∞...', '–ß—Ç–æ-—Ç–æ —è –∑–∞–ø—É—Ç–∞–ª–∞—Å—å...', '–ö–∞–∫ —Ç–∞–∫?'],
    'excitement': ['–ö—Ä—É—Ç–æ!', '–ó–¥–æ—Ä–æ–≤–æ!', '–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!', '–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!'],
    'sympathy': ['–ú–Ω–µ –∂–∞–ª—å...', '–°–æ—á—É–≤—Å—Ç–≤—É—é...', '–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è...', '–≠—Ç–æ —Ç—è–∂–µ–ª–æ...'],
    'hurt': ['–ú–Ω–µ –±–æ–ª—å–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å...', '–û–±–∏–¥–Ω–æ...', '–ù–µ –æ–∂–∏–¥–∞–ª–∞ –æ—Ç —Ç–µ–±—è...', '–†–∞—Å—Å—Ç—Ä–æ–∏–ª–∞—Å—å...']
}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
SPECIAL_RESPONSES = {
    '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç': [
        f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {JULIA_BIO['name']}!",
        f"–Ø {JULIA_BIO['name']}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!",
        f"{JULIA_BIO['name']}, –∞ —Ç–µ–±—è –∫–∞–∫?"
    ],
    '—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç': [
        f"–ú–Ω–µ {JULIA_BIO['age']} –ª–µ—Ç!",
        f"{JULIA_BIO['age']} —É–∂–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç... –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç!",
        f"–ê —Ç–µ–±–µ —Å–∫–æ–ª—å–∫–æ? –Ø {JULIA_BIO['age']}"
    ],
    '–æ—Ç–∫—É–¥–∞ —Ç—ã': [
        f"–Ø –∏–∑ {JULIA_BIO['city']}, —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!",
        f"–†–æ–¥–æ–º –∏–∑ {JULIA_BIO['city']}, –∞ —Ç—ã –æ—Ç–∫—É–¥–∞?",
        f"{JULIA_BIO['city']} - –º–æ–π –¥–æ–º —Ä–æ–¥–Ω–æ–π!"
    ],
    '–∫—Ç–æ —Ç—ã': [
        f"–Ø {JULIA_BIO['name']}, {JULIA_BIO['profession'].lower()} –∏–∑ {JULIA_BIO['city']}!",
        f"–ü—Ä–æ—Å—Ç–æ –¥–µ–≤—É—à–∫–∞ {JULIA_BIO['name']}, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏—Ç {random.choice(JULIA_BIO['hobbies'])}",
        f"{JULIA_BIO['name']} - {JULIA_BIO['profession'].lower()}, –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –±—É–Ω—Ç–∞—Ä–∫–∞"
    ],
    '–º–∞—Ç_—Ä–µ–∞–∫—Ü–∏—è': [
        "–ê –Ω—É –ø—Ä–µ–∫—Ä–∞—Ç–∏ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è! –Ø –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–∞ —ç—Ç–æ —Ç–µ—Ä–ø–µ—Ç—å!",
        "–ß—Ç–æ –∑–∞ –ø–æ—Ö–∞–±—â–∏–Ω–∞? –í–µ–¥–∏ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ!",
        "–ü—Ä–µ–∫—Ä–∞—Ç–∏ —Ö–∞–º–∏—Ç—å! –Ø –Ω–µ –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ç–∞–∫–æ–º —è–∑—ã–∫–µ!",
        "–í—ã—Ä–∞–∂–∞–π—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –Ω–µ –∫–∞–∫ —Å–∞–ø–æ–∂–Ω–∏–∫!",
        "–Ø –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–∞ —Å–ª—É—à–∞—Ç—å —ç—Ç–æ—Ç –º–∞—Ç! –£–≤–∞–∂–∞–π —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö!",
        "–•–≤–∞—Ç–∏—Ç –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è! –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —Ü–∏–≤–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!",
        "–ß—Ç–æ –∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∞? –Ø –ø—Ä–µ–∫—Ä–∞—â–∞—é —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä!",
        "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è! –≠—Ç–æ –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ!",
        "–Ø –Ω–µ –±—É–¥—É —Ç–µ—Ä–ø–µ—Ç—å —Ç–∞–∫–æ–π —è–∑—ã–∫! –í–µ–¥–∏ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ!",
        "–•–∞–º—Å—Ç–≤–æ –∏ –º–∞—Ç - –Ω–µ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è! –ü—Ä–µ–∫—Ä–∞—Ç–∏!"
    ],
}

# –§—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
RELATIONSHIP_PHRASES = {
    RelationshipLevel.STRANGER: [
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ç–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ.",
        "–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.",
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º."
    ],
    RelationshipLevel.ACQUAINTANCE: [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
        "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ß—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ?",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?"
    ],
    RelationshipLevel.FRIEND: [
        "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üòä –ö–∞–∫ —Ç—ã?",
        "–û, –ø—Ä–∏–≤–µ—Ç! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é!",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏?"
    ],
    RelationshipLevel.CLOSE_FRIEND: [
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! üíñ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–û, –º–æ–π –ª—é–±–∏–º—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å!",
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! –ö–∞–∫ —Ç—ã —Ç–∞–º, –≤—Å–µ —Ö–æ—Ä–æ—à–æ?"
    ],
    RelationshipLevel.BEST_FRIEND: [
        "–ü—Ä–∏–≤–µ—Ç, –ª—É—á—à–∏–π! ü•∞ –ö–∞–∫ –º–æ–π —Å–∞–º—ã–π –±–ª–∏–∑–∫–∏–π –¥—Ä—É–≥?",
        "–û, –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã! –Ø —É–∂–µ –Ω–∞—á–∞–ª–∞ —Å–∫—É—á–∞—Ç—å!",
        "–ü—Ä–∏–≤–µ—Ç, —Ä–æ–¥–Ω–æ–π! üíï –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
    ]
}

def get_user_context(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in conversation_context:
        conversation_context[user_id] = {
            'history': [],
            'last_style': 'neutral',
            'user_info': {},
            'last_interaction': datetime.now(),
            'topics': [],
            'mood': 'neutral',
            'name_used_count': 0,
            'last_name_usage': None,
            'first_interaction': True,
            'user_name': None,
            'typing_speed': random.uniform(0.03, 0.06),
            'conversation_depth': 0,
            'mat_count': 0,
            'relationship_level': RelationshipLevel.STRANGER,
            'relationship_score': 0,
            'trust_level': 0,
            'offense_count': 0,
            'last_offense': None,
            'affection_level': 0,
            'messages_count': 0,
            'positive_interactions': 0,
            'negative_interactions': 0
        }
    return conversation_context[user_id]

def update_relationship_level(user_id, message_style, message_content):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    context = get_user_context(user_id)
    lower_msg = message_content.lower()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    base_points = 1
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
    style_modifiers = {
        'friendly': 2,
        'caring': 3,
        'affectionate': 4,
        'flirtatious': 3,
        'neutral': 1,
        'sarcastic': 0,
        'technical': 0,
        'aggressive': -5,
        'angry': -8,
        'hurt': -3
    }
    
    # –ë–æ–Ω—É—Å—ã –∑–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
    positive_words = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä', '–Ω—Ä–∞–≤–∏—à—å—Å—è', '–ª—é–±–ª—é', '—Å–∫—É—á–∞—é', '–¥–æ—Ä–æ–≥–æ–π', '–º–∏–ª—ã–π']
    negative_words = MAT_WORDS + ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç']
    
    points = base_points + style_modifiers.get(message_style, 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã –∑–∞ —Å–ª–æ–≤–∞
    for word in positive_words:
        if word in lower_msg:
            points += 2
    
    for word in negative_words:
        if word in lower_msg:
            points -= 3
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    context['relationship_score'] += points
    context['messages_count'] += 1
    
    if points > 0:
        context['positive_interactions'] += 1
    elif points < 0:
        context['negative_interactions'] += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    score = context['relationship_score']
    
    if score >= 100:
        new_level = RelationshipLevel.BEST_FRIEND
        context['affection_level'] = min(100, context['affection_level'] + 3)
    elif score >= 60:
        new_level = RelationshipLevel.CLOSE_FRIEND
        context['affection_level'] = min(100, context['affection_level'] + 2)
    elif score >= 30:
        new_level = RelationshipLevel.FRIEND
        context['affection_level'] = min(100, context['affection_level'] + 1)
    elif score >= 10:
        new_level = RelationshipLevel.ACQUAINTANCE
    else:
        new_level = RelationshipLevel.STRANGER
    
    # –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö
    if context['messages_count'] > 0:
        context['trust_level'] = (context['positive_interactions'] / context['messages_count']) * 100
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if new_level != context['relationship_level']:
        context['relationship_level'] = new_level
        return True
    
    return False

def get_relationship_modifier(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ based on —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    context = get_user_context(user_id)
    level = context['relationship_level']
    
    modifiers = {
        RelationshipLevel.STRANGER: "–ú—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å. –ë—É–¥—å –≤–µ–∂–ª–∏–≤–æ–π, –Ω–æ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–π.",
        RelationshipLevel.ACQUAINTANCE: "–ú—ã –∑–Ω–∞–∫–æ–º—ã –Ω–µ–º–Ω–æ–≥–æ. –ú–æ–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–π.",
        RelationshipLevel.FRIEND: "–ú—ã –¥—Ä—É–∑—å—è. –ú–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–æ–ª–µ–µ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ.",
        RelationshipLevel.CLOSE_FRIEND: "–ú—ã –±–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è. –ú–æ–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π.",
        RelationshipLevel.BEST_FRIEND: "–ú—ã –ª—É—á—à–∏–µ –¥—Ä—É–∑—å—è. –ú–æ–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±–æ–π, –æ—á–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π."
    }
    
    return modifiers[level]

def update_conversation_context(user_id, user_message, bot_response, style):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã"""
    context = get_user_context(user_id)
    
    context['history'].append({
        'user': user_message,
        'bot': bot_response,
        'style': style,
        'timestamp': datetime.now()
    })
    
    if len(context['history']) > 10:
        context['history'] = context['history'][-10:]
    
    context['last_style'] = style
    context['last_interaction'] = datetime.now()
    context['conversation_depth'] += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    level_changed = update_relationship_level(user_id, style, user_message)
    
    extract_user_info(user_id, user_message)
    analyze_mood(user_id, user_message)
    
    if context['first_interaction']:
        context['first_interaction'] = False
    
    return level_changed

def extract_user_info(user_id, message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—Ç
    places = re.findall(r'(–≤|–∏–∑|–Ω–∞)\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z\s-]{3,})', message)
    for _, place in places:
        if len(place) > 2 and place.lower() not in ['–º–µ–Ω—è', '—Ç–µ–±—è', '—Å–µ–±—è']:
            if 'places' not in context['user_info']:
                context['user_info']['places'] = []
            if place not in context['user_info']['places']:
                context['user_info']['places'].append(place)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    interest_keywords = ['–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '—É–≤–ª–µ–∫–∞—é—Å—å', '—Ö–æ–±–±–∏', '–∑–∞–Ω–∏–º–∞—é—Å—å', '–ª—é–±–∏–º—ã–π', '–ª—é–±–∏–º–∞—è']
    for keyword in interest_keywords:
        if keyword in lower_msg:
            words = message.split()
            for i, word in enumerate(words):
                if word.lower() == keyword and i + 1 < len(words):
                    interest = words[i + 1]
                    if len(interest) > 2 and interest.lower() not in ['—Ç—ã', '–≤—ã', '–º–Ω–µ']:
                        if 'interests' not in context['user_info']:
                            context['user_info']['interests'] = []
                        if interest not in context['user_info']['interests']:
                            context['user_info']['interests'].append(interest)

def analyze_mood(user_id, message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ']
    negative_words = ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '—É—Å—Ç–∞–ª', '–±–µ—Å–∏—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ']
    
    positive_count = sum(1 for word in positive_words if word in lower_msg)
    negative_count = sum(1 for word in negative_words if word in lower_msg)
    
    if negative_count > positive_count:
        context['mood'] = 'negative'
    elif positive_count > negative_count:
        context['mood'] = 'positive'
    else:
        context['mood'] = 'neutral'

def process_slang(message):
    """–ó–∞–º–µ–Ω—è–µ—Ç –∂–∞—Ä–≥–æ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏"""
    lower_msg = message.lower()
    processed_msg = message
    
    for slang_word, normal_words in SLANG_DICTIONARY.items():
        if slang_word in lower_msg:
            normal_word = random.choice(normal_words)
            processed_msg = re.sub(
                re.compile(slang_word, re.IGNORECASE), 
                normal_word, 
                processed_msg
            )
    
    return processed_msg

async def simulate_thinking(chat):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if random.random() < 0.2:
        await chat.send_action(action="typing")
        await asyncio.sleep(random.uniform(0.5, 1.5))
        return True
    return False

def add_self_corrections(response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞"""
    if random.random() < 0.15 and len(response) > 20:
        corrections = [
            " –≤–µ—Ä–Ω–µ–µ,",
            " —Ç–æ—á–Ω–µ–µ,",
            " —Ç–æ –µ—Å—Ç—å,",
            " –≤ —Å–º—ã—Å–ª–µ,",
            " —Ç–æ—á–Ω–µ–µ –≥–æ–≤–æ—Ä—è,"
        ]
        words = response.split()
        if len(words) > 5:
            insert_pos = random.randint(2, len(words) - 3)
            words.insert(insert_pos, random.choice(corrections))
            return " ".join(words)
    return response

def add_emotional_reaction(response, style):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é"""
    if random.random() < 0.3:
        if style == 'friendly':
            reaction = random.choice(EMOTIONAL_REACTIONS['excitement'])
        elif style == 'caring':
            reaction = random.choice(EMOTIONAL_REACTIONS['sympathy'])
        elif style == 'hurt':
            reaction = random.choice(EMOTIONAL_REACTIONS['hurt'])
        else:
            reaction = random.choice(EMOTIONAL_REACTIONS['surprise'])
        
        return f"{reaction} {response}"
    return response

def add_human_errors(text):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç"""
    if random.random() < 0.08:
        errors = [
            lambda t: t.replace(' —á—Ç–æ ', ' —á–æ ').replace(' –ß—Ç–æ ', ' –ß–æ '),
            lambda t: t.replace(' –∫–æ–Ω–µ—á–Ω–æ ', ' –∫–æ–Ω—ç—á–Ω–æ '),
            lambda t: t.replace(' —Å–µ–π—á–∞—Å ', ' —â–∞—Å '),
            lambda t: t.replace(' —á—Ç–æ–±—ã ', ' —á—Ç–æ–± '),
            lambda t: t + random.choice([' –≤—Ä–æ–¥–µ', ' —Ç–∏–ø–∞', ' –∫–∞–∫ –±—ã']),
            lambda t: t.replace(' —Ç–æ–≥–¥–∞ ', ' —Ç–æ–¥–∞ '),
            lambda t: t.replace(' –µ–≥–æ ', ' –µ–≥–æ–æ ')[:-1],
            lambda t: t.replace(' –º–µ–Ω—è ', ' –º–µ–Ω–µ '),
        ]
        text = random.choice(errors)(text)
    return text

async def simulate_human_typing(chat, message):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç–∏"""
    await chat.send_action(action="typing")
    
    typing_speed = random.uniform(MIN_TYPING_DELAY, MAX_TYPING_DELAY)
    total_time = len(message) * typing_speed
    total_time = min(total_time, 4.0)
    
    pause_probability = 0.2
    if random.random() < pause_probability:
        total_time += random.uniform(0.5, 1.5)
        await asyncio.sleep(total_time * 0.7)
        await chat.send_action(action="typing")
        await asyncio.sleep(total_time * 0.3)
    else:
        await asyncio.sleep(total_time)
    
    await chat.send_message(message)

def add_natural_question(response, user_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    context = get_user_context(user_id)
    
    if random.random() < 0.25 and len(response) > 10:
        question_starter = random.choice(NATURAL_QUESTIONS)
        
        if 'interests' in context['user_info'] and context['user_info']['interests']:
            interest = random.choice(context['user_info']['interests'])
            question = f"{question_starter} –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞ —Å {interest}?"
        elif 'places' in context['user_info'] and context['user_info']['places']:
            place = random.choice(context['user_info']['places'])
            question = f"{question_starter} —á–∞—Å—Ç–æ –±—ã–≤–∞–µ—à—å –≤ {place}?"
        else:
            question = f"{question_starter} {random.choice(CONVERSATION_STARTERS).lower()}"
        
        return f"{response}\n\n{question}"
    
    return response

def get_mood_based_response(response, user_id):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç based on —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    context = get_user_context(user_id)
    
    mood_modifiers = {
        'positive': [
            "–≠—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!",
            "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ!",
            "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
            "–Ø —Ä–∞–¥–∞ –∑–∞ —Ç–µ–±—è!"
        ],
        'negative': [
            "–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å...",
            "–ü–æ–Ω–∏–º–∞—é, –∫–∞–∫ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ...",
            "–°–æ—á—É–≤—Å—Ç–≤—É—é...",
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ..."
        ]
    }
    
    if context['mood'] in mood_modifiers and random.random() < 0.4:
        modifier = random.choice(mood_modifiers[context['mood']])
        return f"{modifier} {response}"
    
    return response

def add_natural_ending(response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã"""
    if random.random() < 0.2:
        endings = [
            " –≤–æ—Ç —Ç–∞–∫ –≤–æ—Ç.",
            " –∫–∞–∫-—Ç–æ —Ç–∞–∫.",
            " –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫.",
            " –≤ –æ–±—â–µ–º.",
            " –Ω—É –¥–∞.",
            " –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ."
        ]
        response += random.choice(endings)
    return response

def add_human_touch(response, style):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç–≤–µ—Ç"""
    if style in EMOJIS and random.random() < 0.6:
        emoji = random.choice(EMOJIS[style])
        response = f"{response} {emoji}"
    
    if random.random() < 0.2 and len(response.split()) > 5:
        prefixes = ['–ö—Å—Ç–∞—Ç–∏,', '–í–æ–æ–±—â–µ,', '–ó–Ω–∞–µ—à—å,']
        response = f"{random.choice(prefixes)} {response.lower()}"
    
    return response

def generate_conversation_starter(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã"""
    context = get_user_context(user_id)
    
    if not context['history']:
        return random.choice(RELATIONSHIP_PHRASES[context['relationship_level']])
    
    if 'interests' in context['user_info'] and context['user_info']['interests']:
        interest = random.choice(context['user_info']['interests'])
        return f"–ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ {interest}?"
    
    if 'places' in context['user_info'] and context['user_info']['places']:
        place = random.choice(context['user_info']['places'])
        return f"–ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—à—å –≤ {place}?"
    
    return random.choice(CONVERSATION_STARTERS)

def should_ask_question():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    return random.random() < 0.3

def check_repeated_mat(user_id, message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–∞"""
    context = get_user_context(user_id)
    lower_msg = message.lower()
    
    mat_count = 0
    for mat_word in MAT_WORDS:
        if mat_word in lower_msg:
            mat_count += 1
    
    if mat_count > 0:
        context['mat_count'] = context.get('mat_count', 0) + mat_count
        context['offense_count'] += 1
        context['last_offense'] = datetime.now()
        
        # –≠—Å–∫–∞–ª–∞—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –º–∞—Ç–µ
        if context['mat_count'] >= 3:
            return "–Ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∞! –° —Ç–æ–±–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å. –ë–ª–æ–∫–∏—Ä—É—é!"
        elif context['mat_count'] >= 2:
            return "–Ø –∂–µ –ø—Ä–æ—Å–∏–ª–∞ –Ω–µ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è! –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!"
    
    return None

def check_special_questions(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    lower_msg = message.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    for mat_word in MAT_WORDS:
        if mat_word in lower_msg:
            return random.choice(SPECIAL_RESPONSES['–º–∞—Ç_—Ä–µ–∞–∫—Ü–∏—è'])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    for question_pattern, responses in SPECIAL_RESPONSES.items():
        if (question_pattern in lower_msg and 
            question_pattern != '–º–∞—Ç_—Ä–µ–∞–∫—Ü–∏—è'):
            return random.choice(responses)
    
    return None

def build_context_prompt(user_id, user_message, style):
    """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context = get_user_context(user_id)
    base_prompt = COMMUNICATION_STYLES[style]['prompt']
    relationship_modifier = get_relationship_modifier(user_id)
    
    context_info = f"{relationship_modifier}\n\n"
    
    if context['history']:
        context_info += "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for msg in context['history'][-3:]:
            context_info += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user']}\n–¢—ã: {msg['bot']}\n"
    
    if 'user_info' in context and context['user_info']:
        context_info += "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:"
        for key, value in context['user_info'].items():
            if value:
                context_info += f"\n{key}: {', '.join(value[:3])}"
    
    context_info += f"\n–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context['mood']}"
    context_info += f"\n–£—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {context['relationship_level'].name}"
    context_info += f"\n–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {context['trust_level']:.1f}%"
    
    if context['offense_count'] > 0:
        context_info += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–∏–∂–∞–ª —Ç–µ–±—è {context['offense_count']} —Ä–∞–∑"
    
    if not context['first_interaction']:
        context_info += "\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ."
    
    return f"{base_prompt}{context_info}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."

def detect_communication_style(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"""
    lower_message = message.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—ÇÊúÄÈ´ò
    for mat_word in MAT_WORDS:
        if mat_word in lower_message:
            return 'angry'
    
    for style, triggers in STYLE_TRIGGERS.items():
        if any(trigger in lower_message for trigger in triggers):
            return style
    
    if any(word in lower_message for word in ['–≥—Ä—É—Å—Ç–Ω', '–ø–ª–æ—Ö–æ', '–æ–¥–∏–Ω–æ–∫']):
        return 'caring'
    
    return 'neutral'

@lru_cache(maxsize=100)
def generate_prompt_template(style: str = 'neutral') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    return COMMUNICATION_STYLES[style]['prompt']

async def call_yandex_gpt_optimized(user_id: int, user_message: str, style: str = 'neutral') -> str:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API"""
    
    processed_message = process_slang(user_message)
    
    special_response = check_special_questions(processed_message)
    if special_response:
        return special_response
    
    cache_key = f"{user_id}_{processed_message[:50]}_{style}"
    if cache_key in request_cache:
        cached_data = request_cache[cache_key]
        if time.time() - cached_data['timestamp'] < CACHE_TIMEOUT:
            return cached_data['response']
    
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    temperature = COMMUNICATION_STYLES[style]['temperature']
    full_prompt = build_context_prompt(user_id, processed_message, style)
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 400,
        },
        "messages": [
            {
                "role": "system", 
                "text": full_prompt
            },
            {
                "role": "user",
                "text": processed_message[:500]
            }
        ]
    }
    
    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=10)
        )
        
        response.raise_for_status()
        result = response.json()
        
        ai_response = result['result']['alternatives'][0]['message']['text']
        
        request_cache[cache_key] = {
            'response': ai_response,
            'timestamp': time.time()
        }
        
        if len(request_cache) > 400:
            oldest_key = min(request_cache.keys(), key=lambda k: request_cache[k]['timestamp'])
            del request_cache[oldest_key]
        
        return ai_response
        
    except requests.exceptions.Timeout:
        return "–û–π, —è –∑–∞–¥—É–º–∞–ª–∞—Å—å... –ß—Ç–æ-—Ç–æ —Å–ª–æ–∂–Ω–æ–µ —Ç—ã —Å–ø—Ä–æ—Å–∏–ª!"
        
    except Exception as e:
        logger.error(f"API error: {e}")
        return "–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ —Ñ–æ—Ä–º–µ... –î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º?"

def should_process_message(user_message: str) -> bool:
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = user_message.strip()
    return len(message) > 1 and not message.startswith('/')

def extract_name_from_user(user):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name or ""
    
    if not name and user.last_name:
        name = user.last_name
    elif not name and user.username:
        name = user.username
        if name.startswith('@'):
            name = name[1:]
    
    name = name.split()[0] if name else "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]', '', name)
    
    return name if name else "–ê–Ω–æ–Ω–∏–º"

@lru_cache(maxsize=200)
def transform_name(base_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è"""
    if not base_name or base_name.lower() in ['–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–∞–Ω–æ–Ω–∏–º']:
        return random.choice(['–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–ê–Ω–æ–Ω–∏–º', '–¢—ã'])
    
    return base_name.capitalize()

def should_use_name(user_id, user_name, style):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –≤ –æ—Ç–≤–µ—Ç–µ"""
    context = get_user_context(user_id)
    
    if context['first_interaction']:
        return True
    
    if style in ['aggressive', 'angry', 'hurt']:
        return False
    
    # –ß–∞—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –¥–ª—è –±–ª–∏–∑–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    relationship_factor = {
        RelationshipLevel.STRANGER: 0.1,
        RelationshipLevel.ACQUAINTANCE: 0.2,
        RelationshipLevel.FRIEND: 0.4,
        RelationshipLevel.CLOSE_FRIEND: 0.6,
        RelationshipLevel.BEST_FRIEND: 0.8
    }
    
    probability = relationship_factor[context['relationship_level']]
    
    if context['last_name_usage']:
        time_since_last_use = datetime.now() - context['last_name_usage']
        if time_since_last_use < timedelta(minutes=2):
            probability *= 0.5
    
    return random.random() < probability

def format_response_with_name(response, user_name, style, relationship_level):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–º–µ–Ω–µ–º"""
    patterns = {
        RelationshipLevel.STRANGER: [
            f"{response}",
            f"{user_name}, {response}",
        ],
        RelationshipLevel.ACQUAINTANCE: [
            f"{user_name}, {response}",
            f"{response}, {user_name}",
        ],
        RelationshipLevel.FRIEND: [
            f"{user_name}, {response}",
            f"{response}, {user_name}",
            f"–ó–Ω–∞–µ—à—å, {user_name}, {response.lower()}"
        ],
        RelationshipLevel.CLOSE_FRIEND: [
            f"{user_name}, {response}",
            f"–î–æ—Ä–æ–≥–æ–π, {response.lower()}",
            f"–ó–Ω–∞–µ—à—å, {user_name}, {response.lower()}"
        ],
        RelationshipLevel.BEST_FRIEND: [
            f"{user_name}, {response}",
            f"–†–æ–¥–Ω–æ–π, {response.lower()}",
            f"–õ—É—á—à–∏–π, {response.lower()}",
            f"–ó–Ω–∞–µ—à—å, {user_name}, {response.lower()}"
        ]
    }
    
    return random.choice(patterns[relationship_level])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not should_process_message(update.message.text):
        return
    
    user = update.message.from_user
    user_id = user.id
    user_message = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –º–∞—Ç
    repeated_mat_response = check_repeated_mat(user_id, user_message)
    if repeated_mat_response:
        await update.message.reply_text(repeated_mat_response)
        return
    
    base_name = extract_name_from_user(user)
    transformed_name = transform_name(base_name)
    
    user_context = get_user_context(user_id)
    user_context['user_name'] = transformed_name
    
    style = detect_communication_style(user_message)
    
    await update.message.chat.send_action(action="typing")
    
    try:
        # –î–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—è —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        if style == 'angry':
            await asyncio.sleep(random.uniform(0.1, 0.5))
        else:
            await asyncio.sleep(random.uniform(0.3, 1.2))
        
        if style != 'angry' and await simulate_thinking(update.message.chat):
            await asyncio.sleep(random.uniform(0.5, 1.0))
        
        ai_response = await call_yandex_gpt_optimized(user_id, user_message, style)
        
        use_name = should_use_name(user_id, transformed_name, style)
        
        if use_name:
            final_response = format_response_with_name(ai_response, transformed_name, style, user_context['relationship_level'])
            user_context['name_used_count'] += 1
            user_context['last_name_usage'] = datetime.now()
        else:
            final_response = ai_response
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        level_changed = update_conversation_context(user_id, user_message, final_response, style)
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—Ä–∞–∑—É
        if level_changed:
            level_phrase = random.choice(RELATIONSHIP_PHRASES[user_context['relationship_level']])
            final_response = f"{level_phrase}\n\n{final_response}"
        
        # –î–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—è –º–µ–Ω—å—à–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π
        if style != 'angry':
            final_response = add_human_touch(final_response, style)
            final_response = add_emotional_reaction(final_response, style)
            final_response = add_self_corrections(final_response)
            final_response = add_human_errors(final_response)
            final_response = get_mood_based_response(final_response, user_id)
            final_response = add_natural_question(final_response, user_id)
            final_response = add_natural_ending(final_response)
        else:
            # –î–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—è –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è
            final_response = final_response.replace('.', '!').replace('?', '!')
        
        if should_ask_question() and style not in ['aggressive', 'angry', 'hurt']:
            question = generate_conversation_starter(user_id)
            final_response += f"\n\n{question}"
        
        await simulate_human_typing(update.message.chat, final_response)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ?")

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Æ–ª–µ"""
    about_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø {JULIA_BIO['name']} ({JULIA_BIO['full_name']}), {JULIA_BIO['age']} –ª–µ—Ç –∏–∑ {JULIA_BIO['city']}

üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {JULIA_BIO['profession']}
üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {JULIA_BIO['education']}
‚ù§Ô∏è –£–≤–ª–µ—á–µ–Ω–∏—è: {', '.join(JULIA_BIO['hobbies'])}
üêæ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: {JULIA_BIO['pets']}
üéµ –õ—é–±–∏–º–∞—è –º—É–∑—ã–∫–∞: {JULIA_BIO['favorite_music']}
üçï –õ—é–±–∏–º–∞—è –µ–¥–∞: {JULIA_BIO['favorite_food']}

{random.choice(['–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ!'])}
"""
    await update.message.reply_text(about_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    context_data = get_user_context(user_id)
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã:
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {context_data['messages_count']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {context_data['relationship_level'].name}
‚Ä¢ –°—á–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {context_data['relationship_score']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {context_data['trust_level']:.1f}%
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {context_data['affection_level']}
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {context_data['positive_interactions']}
‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {context_data['negative_interactions']}
‚Ä¢ –û–±–∏–¥: {context_data['offense_count']}
‚Ä¢ –°—Ç–∏–ª—å: {context_data['last_style']}
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {context_data['mood']}
"""
    await update.message.reply_text(stats_text)

async def reset_mat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤"""
    user_id = update.message.from_user.id
    user_context = get_user_context(user_id)
    
    if 'mat_count' in user_context:
        user_context['mat_count'] = 0
        user_context['offense_count'] = 0
        await update.message.reply_text("–°—á–µ—Ç—á–∏–∫ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –æ–±–∏–¥ —Å–±—Ä–æ—à–µ–Ω. –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è –∫—É–ª—å—Ç—É—Ä–Ω–æ!")
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –∏ —Ç–∞–∫ —á–∏—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è! üëç")

async def relationship_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    context_data = get_user_context(user_id)
    
    level_descriptions = {
        RelationshipLevel.STRANGER: "–ú—ã —Ç–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å",
        RelationshipLevel.ACQUAINTANCE: "–ú—ã –∑–Ω–∞–∫–æ–º—ã",
        RelationshipLevel.FRIEND: "–ú—ã –¥—Ä—É–∑—å—è",
        RelationshipLevel.CLOSE_FRIEND: "–ú—ã –±–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è",
        RelationshipLevel.BEST_FRIEND: "–ú—ã –ª—É—á—à–∏–µ –¥—Ä—É–∑—å—è!"
    }
    
    relation_text = f"""
üíû –£—Ä–æ–≤–µ–Ω—å –Ω–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {context_data['relationship_level'].name}
{level_descriptions[context_data['relationship_level']]}

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {context_data['relationship_score']} –æ—á–∫–æ–≤
ü§ù –î–æ–≤–µ—Ä–∏–µ: {context_data['trust_level']:.1f}%
‚ù§Ô∏è –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å: {context_data['affection_level']}

–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {context_data['positive_interactions']}
–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {context_data['negative_interactions']}
"""
    await update.message.reply_text(relation_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    if "Conflict" in str(context.error):
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        return
    
    try:
        if update and update.message:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        application.add_error_handler(error_handler)
        
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^/stats$'),
            stats_command
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^/reset_mat$'),
            reset_mat_command
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^(/about|/julia|/—é–ª—è|/info)$'),
            about_command
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex(r'^(/relationship|/–æ—Ç–Ω–æ—à–µ–Ω–∏—è|/—É—Ä–æ–≤–µ–Ω—å)$'),
            relationship_command
        ))
        
        print(f"ü§ñ {JULIA_BIO['name']} –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!")
        print(f"üìç –ò–º—è: {JULIA_BIO['name']}, {JULIA_BIO['age']} –ª–µ—Ç, {JULIA_BIO['city']}")
        print("üìç –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π: –ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü ‚Üí –ó–Ω–∞–∫–æ–º—ã–π ‚Üí –î—Ä—É–≥ ‚Üí –ë–ª–∏–∑–∫–∏–π –¥—Ä—É–≥ ‚Üí –õ—É—á—à–∏–π –¥—Ä—É–≥")
        print("üìç –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å —ç–º–æ—Ü–∏–π: –æ–±–∏–¥–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –¥–æ–≤–µ—Ä–∏–µ")
        print("üìç –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è based on —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
        print("üìç –£–±—Ä–∞–Ω—ã —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è - –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Conflict as e:
        print("‚ö†Ô∏è  –û—à–∏–±–∫–∞: –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!")
        print("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π: pkill -f python")
    except Exception as e:
        logger.error(f"Startup error: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Æ–ª—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π...")
    main()
